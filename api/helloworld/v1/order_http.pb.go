// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.26.1
// source: helloworld/v1/order.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOrderCreateLockerStorage = "/api.helloworld.v1.Order/CreateLockerStorage"
const OperationOrderCreateOrder = "/api.helloworld.v1.Order/CreateOrder"
const OperationOrderDeleteOrder = "/api.helloworld.v1.Order/DeleteOrder"
const OperationOrderGetOrder = "/api.helloworld.v1.Order/GetOrder"
const OperationOrderHandleRemindTask = "/api.helloworld.v1.Order/HandleRemindTask"
const OperationOrderHandleTimeOutTask = "/api.helloworld.v1.Order/HandleTimeOutTask"
const OperationOrderListOrder = "/api.helloworld.v1.Order/ListOrder"
const OperationOrderManageOrder = "/api.helloworld.v1.Order/ManageOrder"
const OperationOrderManageOrderDel = "/api.helloworld.v1.Order/ManageOrderDel"
const OperationOrderManageOrderDetail = "/api.helloworld.v1.Order/ManageOrderDetail"
const OperationOrderManageOrderSearch = "/api.helloworld.v1.Order/ManageOrderSearch"
const OperationOrderShowOrder = "/api.helloworld.v1.Order/ShowOrder"
const OperationOrderUpdateOrder = "/api.helloworld.v1.Order/UpdateOrder"

type OrderHTTPServer interface {
	CreateLockerStorage(context.Context, *CreateLockerStorageRequest) (*CreateLockerStorageReply, error)
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderReply, error)
	DeleteOrder(context.Context, *DeleteOrderRequest) (*DeleteOrderReply, error)
	GetOrder(context.Context, *GetOrderRequest) (*GetOrderReply, error)
	HandleRemindTask(context.Context, *HandleRemindTaskRequest) (*HandleRemindTaskReply, error)
	HandleTimeOutTask(context.Context, *HandleTimeOutTaskRequest) (*HandleTimeOutTaskReply, error)
	ListOrder(context.Context, *ListOrderRequest) (*ListOrderReply, error)
	ManageOrder(context.Context, *ManageOrderDelRequest) (*ManageOrderDelReply, error)
	ManageOrderDel(context.Context, *ManageOrderDelRequest) (*ManageOrderDelReply, error)
	ManageOrderDetail(context.Context, *ManageOrderDetailRequest) (*ManageOrderDetailReply, error)
	ManageOrderSearch(context.Context, *ManageOrderSearchRequest) (*ManageOrderSearchReply, error)
	ShowOrder(context.Context, *ShowOrderRequest) (*ShowOrderReply, error)
	UpdateOrder(context.Context, *UpdateOrderRequest) (*UpdateOrderReply, error)
}

func RegisterOrderHTTPServer(s *http.Server, srv OrderHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/order/create", _Order_CreateOrder0_HTTP_Handler(srv))
	r.PUT("/v1/order/update", _Order_UpdateOrder0_HTTP_Handler(srv))
	r.POST("/v1/order/del", _Order_DeleteOrder0_HTTP_Handler(srv))
	r.GET("/v1/order/get", _Order_GetOrder0_HTTP_Handler(srv))
	r.POST("/v1/orders/list", _Order_ListOrder0_HTTP_Handler(srv))
	r.POST("/v1/orders/show", _Order_ShowOrder0_HTTP_Handler(srv))
	r.POST("/create/locker/storage", _Order_CreateLockerStorage0_HTTP_Handler(srv))
	r.POST("/handle/remind/task", _Order_HandleRemindTask0_HTTP_Handler(srv))
	r.POST("/handle/timeout/task", _Order_HandleTimeOutTask0_HTTP_Handler(srv))
	r.POST("/manage/orders/search", _Order_ManageOrderSearch0_HTTP_Handler(srv))
	r.POST("/manage/orders/del", _Order_ManageOrderDel0_HTTP_Handler(srv))
	r.POST("/manage/orders/del", _Order_ManageOrder0_HTTP_Handler(srv))
	r.POST("/manage/orders/detail", _Order_ManageOrderDetail0_HTTP_Handler(srv))
}

func _Order_CreateOrder0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderCreateOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrder(ctx, req.(*CreateOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateOrderReply)
		return ctx.Result(200, reply)
	}
}

func _Order_UpdateOrder0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderUpdateOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateOrder(ctx, req.(*UpdateOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateOrderReply)
		return ctx.Result(200, reply)
	}
}

func _Order_DeleteOrder0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderDeleteOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteOrder(ctx, req.(*DeleteOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteOrderReply)
		return ctx.Result(200, reply)
	}
}

func _Order_GetOrder0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOrderRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderGetOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOrder(ctx, req.(*GetOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOrderReply)
		return ctx.Result(200, reply)
	}
}

func _Order_ListOrder0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderListOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOrder(ctx, req.(*ListOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOrderReply)
		return ctx.Result(200, reply)
	}
}

func _Order_ShowOrder0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ShowOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderShowOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ShowOrder(ctx, req.(*ShowOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ShowOrderReply)
		return ctx.Result(200, reply)
	}
}

func _Order_CreateLockerStorage0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateLockerStorageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderCreateLockerStorage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateLockerStorage(ctx, req.(*CreateLockerStorageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateLockerStorageReply)
		return ctx.Result(200, reply)
	}
}

func _Order_HandleRemindTask0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HandleRemindTaskRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderHandleRemindTask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HandleRemindTask(ctx, req.(*HandleRemindTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HandleRemindTaskReply)
		return ctx.Result(200, reply)
	}
}

func _Order_HandleTimeOutTask0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HandleTimeOutTaskRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderHandleTimeOutTask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HandleTimeOutTask(ctx, req.(*HandleTimeOutTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HandleTimeOutTaskReply)
		return ctx.Result(200, reply)
	}
}

func _Order_ManageOrderSearch0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ManageOrderSearchRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderManageOrderSearch)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ManageOrderSearch(ctx, req.(*ManageOrderSearchRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ManageOrderSearchReply)
		return ctx.Result(200, reply)
	}
}

func _Order_ManageOrderDel0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ManageOrderDelRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderManageOrderDel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ManageOrderDel(ctx, req.(*ManageOrderDelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ManageOrderDelReply)
		return ctx.Result(200, reply)
	}
}

func _Order_ManageOrder0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ManageOrderDelRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderManageOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ManageOrder(ctx, req.(*ManageOrderDelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ManageOrderDelReply)
		return ctx.Result(200, reply)
	}
}

func _Order_ManageOrderDetail0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ManageOrderDetailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderManageOrderDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ManageOrderDetail(ctx, req.(*ManageOrderDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ManageOrderDetailReply)
		return ctx.Result(200, reply)
	}
}

type OrderHTTPClient interface {
	CreateLockerStorage(ctx context.Context, req *CreateLockerStorageRequest, opts ...http.CallOption) (rsp *CreateLockerStorageReply, err error)
	CreateOrder(ctx context.Context, req *CreateOrderRequest, opts ...http.CallOption) (rsp *CreateOrderReply, err error)
	DeleteOrder(ctx context.Context, req *DeleteOrderRequest, opts ...http.CallOption) (rsp *DeleteOrderReply, err error)
	GetOrder(ctx context.Context, req *GetOrderRequest, opts ...http.CallOption) (rsp *GetOrderReply, err error)
	HandleRemindTask(ctx context.Context, req *HandleRemindTaskRequest, opts ...http.CallOption) (rsp *HandleRemindTaskReply, err error)
	HandleTimeOutTask(ctx context.Context, req *HandleTimeOutTaskRequest, opts ...http.CallOption) (rsp *HandleTimeOutTaskReply, err error)
	ListOrder(ctx context.Context, req *ListOrderRequest, opts ...http.CallOption) (rsp *ListOrderReply, err error)
	ManageOrder(ctx context.Context, req *ManageOrderDelRequest, opts ...http.CallOption) (rsp *ManageOrderDelReply, err error)
	ManageOrderDel(ctx context.Context, req *ManageOrderDelRequest, opts ...http.CallOption) (rsp *ManageOrderDelReply, err error)
	ManageOrderDetail(ctx context.Context, req *ManageOrderDetailRequest, opts ...http.CallOption) (rsp *ManageOrderDetailReply, err error)
	ManageOrderSearch(ctx context.Context, req *ManageOrderSearchRequest, opts ...http.CallOption) (rsp *ManageOrderSearchReply, err error)
	ShowOrder(ctx context.Context, req *ShowOrderRequest, opts ...http.CallOption) (rsp *ShowOrderReply, err error)
	UpdateOrder(ctx context.Context, req *UpdateOrderRequest, opts ...http.CallOption) (rsp *UpdateOrderReply, err error)
}

type OrderHTTPClientImpl struct {
	cc *http.Client
}

func NewOrderHTTPClient(client *http.Client) OrderHTTPClient {
	return &OrderHTTPClientImpl{client}
}

func (c *OrderHTTPClientImpl) CreateLockerStorage(ctx context.Context, in *CreateLockerStorageRequest, opts ...http.CallOption) (*CreateLockerStorageReply, error) {
	var out CreateLockerStorageReply
	pattern := "/create/locker/storage"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderCreateLockerStorage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderHTTPClientImpl) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...http.CallOption) (*CreateOrderReply, error) {
	var out CreateOrderReply
	pattern := "/v1/order/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderCreateOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderHTTPClientImpl) DeleteOrder(ctx context.Context, in *DeleteOrderRequest, opts ...http.CallOption) (*DeleteOrderReply, error) {
	var out DeleteOrderReply
	pattern := "/v1/order/del"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderDeleteOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderHTTPClientImpl) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...http.CallOption) (*GetOrderReply, error) {
	var out GetOrderReply
	pattern := "/v1/order/get"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrderGetOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderHTTPClientImpl) HandleRemindTask(ctx context.Context, in *HandleRemindTaskRequest, opts ...http.CallOption) (*HandleRemindTaskReply, error) {
	var out HandleRemindTaskReply
	pattern := "/handle/remind/task"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderHandleRemindTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderHTTPClientImpl) HandleTimeOutTask(ctx context.Context, in *HandleTimeOutTaskRequest, opts ...http.CallOption) (*HandleTimeOutTaskReply, error) {
	var out HandleTimeOutTaskReply
	pattern := "/handle/timeout/task"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderHandleTimeOutTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderHTTPClientImpl) ListOrder(ctx context.Context, in *ListOrderRequest, opts ...http.CallOption) (*ListOrderReply, error) {
	var out ListOrderReply
	pattern := "/v1/orders/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderListOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderHTTPClientImpl) ManageOrder(ctx context.Context, in *ManageOrderDelRequest, opts ...http.CallOption) (*ManageOrderDelReply, error) {
	var out ManageOrderDelReply
	pattern := "/manage/orders/del"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderManageOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderHTTPClientImpl) ManageOrderDel(ctx context.Context, in *ManageOrderDelRequest, opts ...http.CallOption) (*ManageOrderDelReply, error) {
	var out ManageOrderDelReply
	pattern := "/manage/orders/del"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderManageOrderDel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderHTTPClientImpl) ManageOrderDetail(ctx context.Context, in *ManageOrderDetailRequest, opts ...http.CallOption) (*ManageOrderDetailReply, error) {
	var out ManageOrderDetailReply
	pattern := "/manage/orders/detail"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderManageOrderDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderHTTPClientImpl) ManageOrderSearch(ctx context.Context, in *ManageOrderSearchRequest, opts ...http.CallOption) (*ManageOrderSearchReply, error) {
	var out ManageOrderSearchReply
	pattern := "/manage/orders/search"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderManageOrderSearch))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderHTTPClientImpl) ShowOrder(ctx context.Context, in *ShowOrderRequest, opts ...http.CallOption) (*ShowOrderReply, error) {
	var out ShowOrderReply
	pattern := "/v1/orders/show"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderShowOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderHTTPClientImpl) UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...http.CallOption) (*UpdateOrderReply, error) {
	var out UpdateOrderReply
	pattern := "/v1/order/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderUpdateOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
