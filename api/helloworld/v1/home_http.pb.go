// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.26.1
// source: helloworld/v1/home.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationHomeListHome = "/api.helloworld.v1.Home/ListHome"

type HomeHTTPServer interface {
	ListHome(context.Context, *ListHomeRequest) (*ListHomeReply, error)
}

func RegisterHomeHTTPServer(s *http.Server, srv HomeHTTPServer) {
	r := s.Route("/")
	r.GET("/home", _Home_ListHome0_HTTP_Handler(srv))
}

func _Home_ListHome0_HTTP_Handler(srv HomeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListHomeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHomeListHome)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListHome(ctx, req.(*ListHomeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListHomeReply)
		return ctx.Result(200, reply)
	}
}

type HomeHTTPClient interface {
	ListHome(ctx context.Context, req *ListHomeRequest, opts ...http.CallOption) (rsp *ListHomeReply, err error)
}

type HomeHTTPClientImpl struct {
	cc *http.Client
}

func NewHomeHTTPClient(client *http.Client) HomeHTTPClient {
	return &HomeHTTPClientImpl{client}
}

func (c *HomeHTTPClientImpl) ListHome(ctx context.Context, in *ListHomeRequest, opts ...http.CallOption) (*ListHomeReply, error) {
	var out ListHomeReply
	pattern := "/home"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHomeListHome))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
