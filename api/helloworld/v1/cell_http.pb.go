// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.19.4
// source: api/helloworld/v1/cell.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCabinetCellBatchCreateCabinetCells = "/api.helloworld.v1.CabinetCell/BatchCreateCabinetCells"
const OperationCabinetCellCloseCabinetCell = "/api.helloworld.v1.CabinetCell/CloseCabinetCell"
const OperationCabinetCellCreateCabinetCell = "/api.helloworld.v1.CabinetCell/CreateCabinetCell"
const OperationCabinetCellDeleteCabinetCell = "/api.helloworld.v1.CabinetCell/DeleteCabinetCell"
const OperationCabinetCellGetCabinetCell = "/api.helloworld.v1.CabinetCell/GetCabinetCell"
const OperationCabinetCellGetCabinetCellsByGroup = "/api.helloworld.v1.CabinetCell/GetCabinetCellsByGroup"
const OperationCabinetCellListCabinetCells = "/api.helloworld.v1.CabinetCell/ListCabinetCells"
const OperationCabinetCellOpenCabinetCell = "/api.helloworld.v1.CabinetCell/OpenCabinetCell"
const OperationCabinetCellSearchCabinetCells = "/api.helloworld.v1.CabinetCell/SearchCabinetCells"
const OperationCabinetCellUpdateCabinetCell = "/api.helloworld.v1.CabinetCell/UpdateCabinetCell"

type CabinetCellHTTPServer interface {
	// BatchCreateCabinetCells 批量创建柜口
	BatchCreateCabinetCells(context.Context, *BatchCreateCabinetCellsRequest) (*BatchCreateCabinetCellsReply, error)
	// CloseCabinetCell 关闭柜口
	CloseCabinetCell(context.Context, *CloseCabinetCellRequest) (*CloseCabinetCellReply, error)
	// CreateCabinetCell 创建柜口
	CreateCabinetCell(context.Context, *CreateCabinetCellRequest) (*CreateCabinetCellReply, error)
	// DeleteCabinetCell 删除柜口
	DeleteCabinetCell(context.Context, *DeleteCabinetCellRequest) (*DeleteCabinetCellReply, error)
	// GetCabinetCell 获取单个柜口
	GetCabinetCell(context.Context, *GetCabinetCellRequest) (*GetCabinetCellReply, error)
	// GetCabinetCellsByGroup 根据柜组获取所有柜口
	GetCabinetCellsByGroup(context.Context, *GetCabinetCellsByGroupRequest) (*GetCabinetCellsByGroupReply, error)
	// ListCabinetCells 获取柜口列表
	ListCabinetCells(context.Context, *ListCabinetCellsRequest) (*ListCabinetCellsReply, error)
	// OpenCabinetCell 开启柜口
	OpenCabinetCell(context.Context, *OpenCabinetCellRequest) (*OpenCabinetCellReply, error)
	// SearchCabinetCells 搜索柜口
	SearchCabinetCells(context.Context, *SearchCabinetCellsRequest) (*SearchCabinetCellsReply, error)
	// UpdateCabinetCell 更新柜口
	UpdateCabinetCell(context.Context, *UpdateCabinetCellRequest) (*UpdateCabinetCellReply, error)
}

func RegisterCabinetCellHTTPServer(s *http.Server, srv CabinetCellHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/cabinet-cell/create", _CabinetCell_CreateCabinetCell0_HTTP_Handler(srv))
	r.PUT("/v1/cabinet-cell/update", _CabinetCell_UpdateCabinetCell0_HTTP_Handler(srv))
	r.POST("/v1/cabinet-cell/delete", _CabinetCell_DeleteCabinetCell0_HTTP_Handler(srv))
	r.GET("/v1/cabinet-cell/get", _CabinetCell_GetCabinetCell0_HTTP_Handler(srv))
	r.POST("/v1/cabinet-cell/list", _CabinetCell_ListCabinetCells0_HTTP_Handler(srv))
	r.POST("/v1/cabinet-cell/search", _CabinetCell_SearchCabinetCells0_HTTP_Handler(srv))
	r.GET("/v1/cabinet-cell/by-group", _CabinetCell_GetCabinetCellsByGroup0_HTTP_Handler(srv))
	r.POST("/v1/cabinet-cell/batch-create", _CabinetCell_BatchCreateCabinetCells0_HTTP_Handler(srv))
	r.POST("/v1/cabinet-cell/open", _CabinetCell_OpenCabinetCell0_HTTP_Handler(srv))
	r.POST("/v1/cabinet-cell/close", _CabinetCell_CloseCabinetCell0_HTTP_Handler(srv))
}

func _CabinetCell_CreateCabinetCell0_HTTP_Handler(srv CabinetCellHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCabinetCellRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCabinetCellCreateCabinetCell)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCabinetCell(ctx, req.(*CreateCabinetCellRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCabinetCellReply)
		return ctx.Result(200, reply)
	}
}

func _CabinetCell_UpdateCabinetCell0_HTTP_Handler(srv CabinetCellHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCabinetCellRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCabinetCellUpdateCabinetCell)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCabinetCell(ctx, req.(*UpdateCabinetCellRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCabinetCellReply)
		return ctx.Result(200, reply)
	}
}

func _CabinetCell_DeleteCabinetCell0_HTTP_Handler(srv CabinetCellHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCabinetCellRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCabinetCellDeleteCabinetCell)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCabinetCell(ctx, req.(*DeleteCabinetCellRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCabinetCellReply)
		return ctx.Result(200, reply)
	}
}

func _CabinetCell_GetCabinetCell0_HTTP_Handler(srv CabinetCellHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCabinetCellRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCabinetCellGetCabinetCell)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCabinetCell(ctx, req.(*GetCabinetCellRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCabinetCellReply)
		return ctx.Result(200, reply)
	}
}

func _CabinetCell_ListCabinetCells0_HTTP_Handler(srv CabinetCellHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCabinetCellsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCabinetCellListCabinetCells)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCabinetCells(ctx, req.(*ListCabinetCellsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCabinetCellsReply)
		return ctx.Result(200, reply)
	}
}

func _CabinetCell_SearchCabinetCells0_HTTP_Handler(srv CabinetCellHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchCabinetCellsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCabinetCellSearchCabinetCells)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchCabinetCells(ctx, req.(*SearchCabinetCellsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchCabinetCellsReply)
		return ctx.Result(200, reply)
	}
}

func _CabinetCell_GetCabinetCellsByGroup0_HTTP_Handler(srv CabinetCellHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCabinetCellsByGroupRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCabinetCellGetCabinetCellsByGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCabinetCellsByGroup(ctx, req.(*GetCabinetCellsByGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCabinetCellsByGroupReply)
		return ctx.Result(200, reply)
	}
}

func _CabinetCell_BatchCreateCabinetCells0_HTTP_Handler(srv CabinetCellHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchCreateCabinetCellsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCabinetCellBatchCreateCabinetCells)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchCreateCabinetCells(ctx, req.(*BatchCreateCabinetCellsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchCreateCabinetCellsReply)
		return ctx.Result(200, reply)
	}
}

func _CabinetCell_OpenCabinetCell0_HTTP_Handler(srv CabinetCellHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OpenCabinetCellRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCabinetCellOpenCabinetCell)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OpenCabinetCell(ctx, req.(*OpenCabinetCellRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OpenCabinetCellReply)
		return ctx.Result(200, reply)
	}
}

func _CabinetCell_CloseCabinetCell0_HTTP_Handler(srv CabinetCellHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CloseCabinetCellRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCabinetCellCloseCabinetCell)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CloseCabinetCell(ctx, req.(*CloseCabinetCellRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CloseCabinetCellReply)
		return ctx.Result(200, reply)
	}
}

type CabinetCellHTTPClient interface {
	BatchCreateCabinetCells(ctx context.Context, req *BatchCreateCabinetCellsRequest, opts ...http.CallOption) (rsp *BatchCreateCabinetCellsReply, err error)
	CloseCabinetCell(ctx context.Context, req *CloseCabinetCellRequest, opts ...http.CallOption) (rsp *CloseCabinetCellReply, err error)
	CreateCabinetCell(ctx context.Context, req *CreateCabinetCellRequest, opts ...http.CallOption) (rsp *CreateCabinetCellReply, err error)
	DeleteCabinetCell(ctx context.Context, req *DeleteCabinetCellRequest, opts ...http.CallOption) (rsp *DeleteCabinetCellReply, err error)
	GetCabinetCell(ctx context.Context, req *GetCabinetCellRequest, opts ...http.CallOption) (rsp *GetCabinetCellReply, err error)
	GetCabinetCellsByGroup(ctx context.Context, req *GetCabinetCellsByGroupRequest, opts ...http.CallOption) (rsp *GetCabinetCellsByGroupReply, err error)
	ListCabinetCells(ctx context.Context, req *ListCabinetCellsRequest, opts ...http.CallOption) (rsp *ListCabinetCellsReply, err error)
	OpenCabinetCell(ctx context.Context, req *OpenCabinetCellRequest, opts ...http.CallOption) (rsp *OpenCabinetCellReply, err error)
	SearchCabinetCells(ctx context.Context, req *SearchCabinetCellsRequest, opts ...http.CallOption) (rsp *SearchCabinetCellsReply, err error)
	UpdateCabinetCell(ctx context.Context, req *UpdateCabinetCellRequest, opts ...http.CallOption) (rsp *UpdateCabinetCellReply, err error)
}

type CabinetCellHTTPClientImpl struct {
	cc *http.Client
}

func NewCabinetCellHTTPClient(client *http.Client) CabinetCellHTTPClient {
	return &CabinetCellHTTPClientImpl{client}
}

func (c *CabinetCellHTTPClientImpl) BatchCreateCabinetCells(ctx context.Context, in *BatchCreateCabinetCellsRequest, opts ...http.CallOption) (*BatchCreateCabinetCellsReply, error) {
	var out BatchCreateCabinetCellsReply
	pattern := "/v1/cabinet-cell/batch-create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCabinetCellBatchCreateCabinetCells))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CabinetCellHTTPClientImpl) CloseCabinetCell(ctx context.Context, in *CloseCabinetCellRequest, opts ...http.CallOption) (*CloseCabinetCellReply, error) {
	var out CloseCabinetCellReply
	pattern := "/v1/cabinet-cell/close"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCabinetCellCloseCabinetCell))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CabinetCellHTTPClientImpl) CreateCabinetCell(ctx context.Context, in *CreateCabinetCellRequest, opts ...http.CallOption) (*CreateCabinetCellReply, error) {
	var out CreateCabinetCellReply
	pattern := "/v1/cabinet-cell/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCabinetCellCreateCabinetCell))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CabinetCellHTTPClientImpl) DeleteCabinetCell(ctx context.Context, in *DeleteCabinetCellRequest, opts ...http.CallOption) (*DeleteCabinetCellReply, error) {
	var out DeleteCabinetCellReply
	pattern := "/v1/cabinet-cell/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCabinetCellDeleteCabinetCell))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CabinetCellHTTPClientImpl) GetCabinetCell(ctx context.Context, in *GetCabinetCellRequest, opts ...http.CallOption) (*GetCabinetCellReply, error) {
	var out GetCabinetCellReply
	pattern := "/v1/cabinet-cell/get"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCabinetCellGetCabinetCell))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CabinetCellHTTPClientImpl) GetCabinetCellsByGroup(ctx context.Context, in *GetCabinetCellsByGroupRequest, opts ...http.CallOption) (*GetCabinetCellsByGroupReply, error) {
	var out GetCabinetCellsByGroupReply
	pattern := "/v1/cabinet-cell/by-group"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCabinetCellGetCabinetCellsByGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CabinetCellHTTPClientImpl) ListCabinetCells(ctx context.Context, in *ListCabinetCellsRequest, opts ...http.CallOption) (*ListCabinetCellsReply, error) {
	var out ListCabinetCellsReply
	pattern := "/v1/cabinet-cell/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCabinetCellListCabinetCells))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CabinetCellHTTPClientImpl) OpenCabinetCell(ctx context.Context, in *OpenCabinetCellRequest, opts ...http.CallOption) (*OpenCabinetCellReply, error) {
	var out OpenCabinetCellReply
	pattern := "/v1/cabinet-cell/open"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCabinetCellOpenCabinetCell))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CabinetCellHTTPClientImpl) SearchCabinetCells(ctx context.Context, in *SearchCabinetCellsRequest, opts ...http.CallOption) (*SearchCabinetCellsReply, error) {
	var out SearchCabinetCellsReply
	pattern := "/v1/cabinet-cell/search"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCabinetCellSearchCabinetCells))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CabinetCellHTTPClientImpl) UpdateCabinetCell(ctx context.Context, in *UpdateCabinetCellRequest, opts ...http.CallOption) (*UpdateCabinetCellReply, error) {
	var out UpdateCabinetCellReply
	pattern := "/v1/cabinet-cell/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCabinetCellUpdateCabinetCell))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
