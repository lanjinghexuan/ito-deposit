// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.19.4
// source: helloworld/v1/nearby.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationNearbyFindMyNearbyLockerPoints = "/api.helloworld.v1.Nearby/FindMyNearbyLockerPoints"
const OperationNearbyFindNearbyLockerPoints = "/api.helloworld.v1.Nearby/FindNearbyLockerPoints"
const OperationNearbyFindNearbyLockerPointsInCity = "/api.helloworld.v1.Nearby/FindNearbyLockerPointsInCity"
const OperationNearbyGetCityLockerPointsMap = "/api.helloworld.v1.Nearby/GetCityLockerPointsMap"
const OperationNearbyGetMyNearbyInfo = "/api.helloworld.v1.Nearby/GetMyNearbyInfo"
const OperationNearbyInitLockerPointsGeo = "/api.helloworld.v1.Nearby/InitLockerPointsGeo"
const OperationNearbySearchLockerPointsInCity = "/api.helloworld.v1.Nearby/SearchLockerPointsInCity"

type NearbyHTTPServer interface {
	// FindMyNearbyLockerPoints 使用实时定位查找我的附近寄存点
	FindMyNearbyLockerPoints(context.Context, *FindMyNearbyLockerPointsRequest) (*FindNearbyLockerPointsReply, error)
	// FindNearbyLockerPoints 查找附近的寄存点
	FindNearbyLockerPoints(context.Context, *FindNearbyLockerPointsRequest) (*FindNearbyLockerPointsReply, error)
	// FindNearbyLockerPointsInCity 查找用户在指定城市内附近的寄存点
	FindNearbyLockerPointsInCity(context.Context, *FindNearbyLockerPointsInCityRequest) (*FindNearbyLockerPointsReply, error)
	// GetCityLockerPointsMap 获取城市寄存点分布图数据
	GetCityLockerPointsMap(context.Context, *GetCityLockerPointsMapRequest) (*GetCityLockerPointsMapReply, error)
	// GetMyNearbyInfo 获取我的附近信息（实时位置和附近寄存点）
	GetMyNearbyInfo(context.Context, *GetMyNearbyInfoRequest) (*GetMyNearbyInfoReply, error)
	// InitLockerPointsGeo 初始化寄存点地理位置数据
	InitLockerPointsGeo(context.Context, *InitLockerPointsGeoRequest) (*InitLockerPointsGeoReply, error)
	// SearchLockerPointsInCity 搜索指定城市内的寄存点
	SearchLockerPointsInCity(context.Context, *SearchLockerPointsInCityRequest) (*SearchLockerPointsInCityReply, error)
}

func RegisterNearbyHTTPServer(s *http.Server, srv NearbyHTTPServer) {
	r := s.Route("/")
	r.POST("/api/admin/nearby/init", _Nearby_InitLockerPointsGeo0_HTTP_Handler(srv))
	r.GET("/api/nearby/locker-points", _Nearby_FindNearbyLockerPoints0_HTTP_Handler(srv))
	r.GET("/api/nearby/city/locker-points", _Nearby_FindNearbyLockerPointsInCity0_HTTP_Handler(srv))
	r.GET("/api/nearby/my-location/locker-points", _Nearby_FindMyNearbyLockerPoints0_HTTP_Handler(srv))
	r.GET("/api/nearby/city/search", _Nearby_SearchLockerPointsInCity0_HTTP_Handler(srv))
	r.GET("/api/nearby/city/map", _Nearby_GetCityLockerPointsMap0_HTTP_Handler(srv))
	r.GET("/api/nearby/my-nearby", _Nearby_GetMyNearbyInfo0_HTTP_Handler(srv))
}

func _Nearby_InitLockerPointsGeo0_HTTP_Handler(srv NearbyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InitLockerPointsGeoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNearbyInitLockerPointsGeo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InitLockerPointsGeo(ctx, req.(*InitLockerPointsGeoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*InitLockerPointsGeoReply)
		return ctx.Result(200, reply)
	}
}

func _Nearby_FindNearbyLockerPoints0_HTTP_Handler(srv NearbyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FindNearbyLockerPointsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNearbyFindNearbyLockerPoints)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindNearbyLockerPoints(ctx, req.(*FindNearbyLockerPointsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FindNearbyLockerPointsReply)
		return ctx.Result(200, reply)
	}
}

func _Nearby_FindNearbyLockerPointsInCity0_HTTP_Handler(srv NearbyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FindNearbyLockerPointsInCityRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNearbyFindNearbyLockerPointsInCity)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindNearbyLockerPointsInCity(ctx, req.(*FindNearbyLockerPointsInCityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FindNearbyLockerPointsReply)
		return ctx.Result(200, reply)
	}
}

func _Nearby_FindMyNearbyLockerPoints0_HTTP_Handler(srv NearbyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FindMyNearbyLockerPointsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNearbyFindMyNearbyLockerPoints)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindMyNearbyLockerPoints(ctx, req.(*FindMyNearbyLockerPointsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FindNearbyLockerPointsReply)
		return ctx.Result(200, reply)
	}
}

func _Nearby_SearchLockerPointsInCity0_HTTP_Handler(srv NearbyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchLockerPointsInCityRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNearbySearchLockerPointsInCity)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchLockerPointsInCity(ctx, req.(*SearchLockerPointsInCityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchLockerPointsInCityReply)
		return ctx.Result(200, reply)
	}
}

func _Nearby_GetCityLockerPointsMap0_HTTP_Handler(srv NearbyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCityLockerPointsMapRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNearbyGetCityLockerPointsMap)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCityLockerPointsMap(ctx, req.(*GetCityLockerPointsMapRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCityLockerPointsMapReply)
		return ctx.Result(200, reply)
	}
}

func _Nearby_GetMyNearbyInfo0_HTTP_Handler(srv NearbyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMyNearbyInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNearbyGetMyNearbyInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMyNearbyInfo(ctx, req.(*GetMyNearbyInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMyNearbyInfoReply)
		return ctx.Result(200, reply)
	}
}

type NearbyHTTPClient interface {
	FindMyNearbyLockerPoints(ctx context.Context, req *FindMyNearbyLockerPointsRequest, opts ...http.CallOption) (rsp *FindNearbyLockerPointsReply, err error)
	FindNearbyLockerPoints(ctx context.Context, req *FindNearbyLockerPointsRequest, opts ...http.CallOption) (rsp *FindNearbyLockerPointsReply, err error)
	FindNearbyLockerPointsInCity(ctx context.Context, req *FindNearbyLockerPointsInCityRequest, opts ...http.CallOption) (rsp *FindNearbyLockerPointsReply, err error)
	GetCityLockerPointsMap(ctx context.Context, req *GetCityLockerPointsMapRequest, opts ...http.CallOption) (rsp *GetCityLockerPointsMapReply, err error)
	GetMyNearbyInfo(ctx context.Context, req *GetMyNearbyInfoRequest, opts ...http.CallOption) (rsp *GetMyNearbyInfoReply, err error)
	InitLockerPointsGeo(ctx context.Context, req *InitLockerPointsGeoRequest, opts ...http.CallOption) (rsp *InitLockerPointsGeoReply, err error)
	SearchLockerPointsInCity(ctx context.Context, req *SearchLockerPointsInCityRequest, opts ...http.CallOption) (rsp *SearchLockerPointsInCityReply, err error)
}

type NearbyHTTPClientImpl struct {
	cc *http.Client
}

func NewNearbyHTTPClient(client *http.Client) NearbyHTTPClient {
	return &NearbyHTTPClientImpl{client}
}

func (c *NearbyHTTPClientImpl) FindMyNearbyLockerPoints(ctx context.Context, in *FindMyNearbyLockerPointsRequest, opts ...http.CallOption) (*FindNearbyLockerPointsReply, error) {
	var out FindNearbyLockerPointsReply
	pattern := "/api/nearby/my-location/locker-points"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNearbyFindMyNearbyLockerPoints))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NearbyHTTPClientImpl) FindNearbyLockerPoints(ctx context.Context, in *FindNearbyLockerPointsRequest, opts ...http.CallOption) (*FindNearbyLockerPointsReply, error) {
	var out FindNearbyLockerPointsReply
	pattern := "/api/nearby/locker-points"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNearbyFindNearbyLockerPoints))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NearbyHTTPClientImpl) FindNearbyLockerPointsInCity(ctx context.Context, in *FindNearbyLockerPointsInCityRequest, opts ...http.CallOption) (*FindNearbyLockerPointsReply, error) {
	var out FindNearbyLockerPointsReply
	pattern := "/api/nearby/city/locker-points"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNearbyFindNearbyLockerPointsInCity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NearbyHTTPClientImpl) GetCityLockerPointsMap(ctx context.Context, in *GetCityLockerPointsMapRequest, opts ...http.CallOption) (*GetCityLockerPointsMapReply, error) {
	var out GetCityLockerPointsMapReply
	pattern := "/api/nearby/city/map"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNearbyGetCityLockerPointsMap))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NearbyHTTPClientImpl) GetMyNearbyInfo(ctx context.Context, in *GetMyNearbyInfoRequest, opts ...http.CallOption) (*GetMyNearbyInfoReply, error) {
	var out GetMyNearbyInfoReply
	pattern := "/api/nearby/my-nearby"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNearbyGetMyNearbyInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NearbyHTTPClientImpl) InitLockerPointsGeo(ctx context.Context, in *InitLockerPointsGeoRequest, opts ...http.CallOption) (*InitLockerPointsGeoReply, error) {
	var out InitLockerPointsGeoReply
	pattern := "/api/admin/nearby/init"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNearbyInitLockerPointsGeo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NearbyHTTPClientImpl) SearchLockerPointsInCity(ctx context.Context, in *SearchLockerPointsInCityRequest, opts ...http.CallOption) (*SearchLockerPointsInCityReply, error) {
	var out SearchLockerPointsInCityReply
	pattern := "/api/nearby/city/search"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNearbySearchLockerPointsInCity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
