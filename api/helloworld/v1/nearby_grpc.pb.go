// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: helloworld/v1/nearby.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Nearby_InitLockerPointsGeo_FullMethodName          = "/api.helloworld.v1.Nearby/InitLockerPointsGeo"
	Nearby_FindNearbyLockerPoints_FullMethodName       = "/api.helloworld.v1.Nearby/FindNearbyLockerPoints"
	Nearby_FindNearbyLockerPointsInCity_FullMethodName = "/api.helloworld.v1.Nearby/FindNearbyLockerPointsInCity"
	Nearby_FindMyNearbyLockerPoints_FullMethodName     = "/api.helloworld.v1.Nearby/FindMyNearbyLockerPoints"
	Nearby_SearchLockerPointsInCity_FullMethodName     = "/api.helloworld.v1.Nearby/SearchLockerPointsInCity"
	Nearby_GetCityLockerPointsMap_FullMethodName       = "/api.helloworld.v1.Nearby/GetCityLockerPointsMap"
	Nearby_GetMyNearbyInfo_FullMethodName              = "/api.helloworld.v1.Nearby/GetMyNearbyInfo"
)

// NearbyClient is the client API for Nearby service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 附近服务定义
type NearbyClient interface {
	// 初始化寄存点地理位置数据
	InitLockerPointsGeo(ctx context.Context, in *InitLockerPointsGeoRequest, opts ...grpc.CallOption) (*InitLockerPointsGeoReply, error)
	// 查找附近的寄存点
	FindNearbyLockerPoints(ctx context.Context, in *FindNearbyLockerPointsRequest, opts ...grpc.CallOption) (*FindNearbyLockerPointsReply, error)
	// 查找用户在指定城市内附近的寄存点
	FindNearbyLockerPointsInCity(ctx context.Context, in *FindNearbyLockerPointsInCityRequest, opts ...grpc.CallOption) (*FindNearbyLockerPointsReply, error)
	// 使用实时定位查找我的附近寄存点
	FindMyNearbyLockerPoints(ctx context.Context, in *FindMyNearbyLockerPointsRequest, opts ...grpc.CallOption) (*FindNearbyLockerPointsReply, error)
	// 搜索指定城市内的寄存点
	SearchLockerPointsInCity(ctx context.Context, in *SearchLockerPointsInCityRequest, opts ...grpc.CallOption) (*SearchLockerPointsInCityReply, error)
	// 获取城市寄存点分布图数据
	GetCityLockerPointsMap(ctx context.Context, in *GetCityLockerPointsMapRequest, opts ...grpc.CallOption) (*GetCityLockerPointsMapReply, error)
	// 获取我的附近信息（实时位置和附近寄存点）
	GetMyNearbyInfo(ctx context.Context, in *GetMyNearbyInfoRequest, opts ...grpc.CallOption) (*GetMyNearbyInfoReply, error)
}

type nearbyClient struct {
	cc grpc.ClientConnInterface
}

func NewNearbyClient(cc grpc.ClientConnInterface) NearbyClient {
	return &nearbyClient{cc}
}

func (c *nearbyClient) InitLockerPointsGeo(ctx context.Context, in *InitLockerPointsGeoRequest, opts ...grpc.CallOption) (*InitLockerPointsGeoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitLockerPointsGeoReply)
	err := c.cc.Invoke(ctx, Nearby_InitLockerPointsGeo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nearbyClient) FindNearbyLockerPoints(ctx context.Context, in *FindNearbyLockerPointsRequest, opts ...grpc.CallOption) (*FindNearbyLockerPointsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindNearbyLockerPointsReply)
	err := c.cc.Invoke(ctx, Nearby_FindNearbyLockerPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nearbyClient) FindNearbyLockerPointsInCity(ctx context.Context, in *FindNearbyLockerPointsInCityRequest, opts ...grpc.CallOption) (*FindNearbyLockerPointsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindNearbyLockerPointsReply)
	err := c.cc.Invoke(ctx, Nearby_FindNearbyLockerPointsInCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nearbyClient) FindMyNearbyLockerPoints(ctx context.Context, in *FindMyNearbyLockerPointsRequest, opts ...grpc.CallOption) (*FindNearbyLockerPointsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindNearbyLockerPointsReply)
	err := c.cc.Invoke(ctx, Nearby_FindMyNearbyLockerPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nearbyClient) SearchLockerPointsInCity(ctx context.Context, in *SearchLockerPointsInCityRequest, opts ...grpc.CallOption) (*SearchLockerPointsInCityReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchLockerPointsInCityReply)
	err := c.cc.Invoke(ctx, Nearby_SearchLockerPointsInCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nearbyClient) GetCityLockerPointsMap(ctx context.Context, in *GetCityLockerPointsMapRequest, opts ...grpc.CallOption) (*GetCityLockerPointsMapReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCityLockerPointsMapReply)
	err := c.cc.Invoke(ctx, Nearby_GetCityLockerPointsMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nearbyClient) GetMyNearbyInfo(ctx context.Context, in *GetMyNearbyInfoRequest, opts ...grpc.CallOption) (*GetMyNearbyInfoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMyNearbyInfoReply)
	err := c.cc.Invoke(ctx, Nearby_GetMyNearbyInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NearbyServer is the server API for Nearby service.
// All implementations must embed UnimplementedNearbyServer
// for forward compatibility.
//
// 附近服务定义
type NearbyServer interface {
	// 初始化寄存点地理位置数据
	InitLockerPointsGeo(context.Context, *InitLockerPointsGeoRequest) (*InitLockerPointsGeoReply, error)
	// 查找附近的寄存点
	FindNearbyLockerPoints(context.Context, *FindNearbyLockerPointsRequest) (*FindNearbyLockerPointsReply, error)
	// 查找用户在指定城市内附近的寄存点
	FindNearbyLockerPointsInCity(context.Context, *FindNearbyLockerPointsInCityRequest) (*FindNearbyLockerPointsReply, error)
	// 使用实时定位查找我的附近寄存点
	FindMyNearbyLockerPoints(context.Context, *FindMyNearbyLockerPointsRequest) (*FindNearbyLockerPointsReply, error)
	// 搜索指定城市内的寄存点
	SearchLockerPointsInCity(context.Context, *SearchLockerPointsInCityRequest) (*SearchLockerPointsInCityReply, error)
	// 获取城市寄存点分布图数据
	GetCityLockerPointsMap(context.Context, *GetCityLockerPointsMapRequest) (*GetCityLockerPointsMapReply, error)
	// 获取我的附近信息（实时位置和附近寄存点）
	GetMyNearbyInfo(context.Context, *GetMyNearbyInfoRequest) (*GetMyNearbyInfoReply, error)
	mustEmbedUnimplementedNearbyServer()
}

// UnimplementedNearbyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNearbyServer struct{}

func (UnimplementedNearbyServer) InitLockerPointsGeo(context.Context, *InitLockerPointsGeoRequest) (*InitLockerPointsGeoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitLockerPointsGeo not implemented")
}
func (UnimplementedNearbyServer) FindNearbyLockerPoints(context.Context, *FindNearbyLockerPointsRequest) (*FindNearbyLockerPointsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNearbyLockerPoints not implemented")
}
func (UnimplementedNearbyServer) FindNearbyLockerPointsInCity(context.Context, *FindNearbyLockerPointsInCityRequest) (*FindNearbyLockerPointsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNearbyLockerPointsInCity not implemented")
}
func (UnimplementedNearbyServer) FindMyNearbyLockerPoints(context.Context, *FindMyNearbyLockerPointsRequest) (*FindNearbyLockerPointsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMyNearbyLockerPoints not implemented")
}
func (UnimplementedNearbyServer) SearchLockerPointsInCity(context.Context, *SearchLockerPointsInCityRequest) (*SearchLockerPointsInCityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLockerPointsInCity not implemented")
}
func (UnimplementedNearbyServer) GetCityLockerPointsMap(context.Context, *GetCityLockerPointsMapRequest) (*GetCityLockerPointsMapReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCityLockerPointsMap not implemented")
}
func (UnimplementedNearbyServer) GetMyNearbyInfo(context.Context, *GetMyNearbyInfoRequest) (*GetMyNearbyInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyNearbyInfo not implemented")
}
func (UnimplementedNearbyServer) mustEmbedUnimplementedNearbyServer() {}
func (UnimplementedNearbyServer) testEmbeddedByValue()                {}

// UnsafeNearbyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NearbyServer will
// result in compilation errors.
type UnsafeNearbyServer interface {
	mustEmbedUnimplementedNearbyServer()
}

func RegisterNearbyServer(s grpc.ServiceRegistrar, srv NearbyServer) {
	// If the following call pancis, it indicates UnimplementedNearbyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Nearby_ServiceDesc, srv)
}

func _Nearby_InitLockerPointsGeo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitLockerPointsGeoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NearbyServer).InitLockerPointsGeo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nearby_InitLockerPointsGeo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NearbyServer).InitLockerPointsGeo(ctx, req.(*InitLockerPointsGeoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nearby_FindNearbyLockerPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNearbyLockerPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NearbyServer).FindNearbyLockerPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nearby_FindNearbyLockerPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NearbyServer).FindNearbyLockerPoints(ctx, req.(*FindNearbyLockerPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nearby_FindNearbyLockerPointsInCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNearbyLockerPointsInCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NearbyServer).FindNearbyLockerPointsInCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nearby_FindNearbyLockerPointsInCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NearbyServer).FindNearbyLockerPointsInCity(ctx, req.(*FindNearbyLockerPointsInCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nearby_FindMyNearbyLockerPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMyNearbyLockerPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NearbyServer).FindMyNearbyLockerPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nearby_FindMyNearbyLockerPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NearbyServer).FindMyNearbyLockerPoints(ctx, req.(*FindMyNearbyLockerPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nearby_SearchLockerPointsInCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLockerPointsInCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NearbyServer).SearchLockerPointsInCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nearby_SearchLockerPointsInCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NearbyServer).SearchLockerPointsInCity(ctx, req.(*SearchLockerPointsInCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nearby_GetCityLockerPointsMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCityLockerPointsMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NearbyServer).GetCityLockerPointsMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nearby_GetCityLockerPointsMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NearbyServer).GetCityLockerPointsMap(ctx, req.(*GetCityLockerPointsMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nearby_GetMyNearbyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyNearbyInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NearbyServer).GetMyNearbyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nearby_GetMyNearbyInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NearbyServer).GetMyNearbyInfo(ctx, req.(*GetMyNearbyInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Nearby_ServiceDesc is the grpc.ServiceDesc for Nearby service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Nearby_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.helloworld.v1.Nearby",
	HandlerType: (*NearbyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitLockerPointsGeo",
			Handler:    _Nearby_InitLockerPointsGeo_Handler,
		},
		{
			MethodName: "FindNearbyLockerPoints",
			Handler:    _Nearby_FindNearbyLockerPoints_Handler,
		},
		{
			MethodName: "FindNearbyLockerPointsInCity",
			Handler:    _Nearby_FindNearbyLockerPointsInCity_Handler,
		},
		{
			MethodName: "FindMyNearbyLockerPoints",
			Handler:    _Nearby_FindMyNearbyLockerPoints_Handler,
		},
		{
			MethodName: "SearchLockerPointsInCity",
			Handler:    _Nearby_SearchLockerPointsInCity_Handler,
		},
		{
			MethodName: "GetCityLockerPointsMap",
			Handler:    _Nearby_GetCityLockerPointsMap_Handler,
		},
		{
			MethodName: "GetMyNearbyInfo",
			Handler:    _Nearby_GetMyNearbyInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/v1/nearby.proto",
}
