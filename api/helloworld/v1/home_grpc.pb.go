// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: api/helloworld/v1/home.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Home_CreateHome_FullMethodName  = "/api.helloworld.v1.Home/CreateHome"
	Home_UpdateHome_FullMethodName  = "/api.helloworld.v1.Home/UpdateHome"
	Home_DeleteHome_FullMethodName  = "/api.helloworld.v1.Home/DeleteHome"
	Home_GetHome_FullMethodName     = "/api.helloworld.v1.Home/GetHome"
	Home_ListHome_FullMethodName    = "/api.helloworld.v1.Home/ListHome"
	Home_CreateLocal_FullMethodName = "/api.helloworld.v1.Home/CreateLocal"
)

// HomeClient is the client API for Home service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HomeClient interface {
	CreateHome(ctx context.Context, in *CreateHomeRequest, opts ...grpc.CallOption) (*CreateHomeReply, error)
	UpdateHome(ctx context.Context, in *UpdateHomeRequest, opts ...grpc.CallOption) (*UpdateHomeReply, error)
	DeleteHome(ctx context.Context, in *DeleteHomeRequest, opts ...grpc.CallOption) (*DeleteHomeReply, error)
	GetHome(ctx context.Context, in *GetHomeRequest, opts ...grpc.CallOption) (*GetHomeReply, error)
	ListHome(ctx context.Context, in *ListHomeRequest, opts ...grpc.CallOption) (*ListHomeReply, error)
	CreateLocal(ctx context.Context, in *CreateLocalRequest, opts ...grpc.CallOption) (*CreateLocalReply, error)
}

type homeClient struct {
	cc grpc.ClientConnInterface
}

func NewHomeClient(cc grpc.ClientConnInterface) HomeClient {
	return &homeClient{cc}
}

func (c *homeClient) CreateHome(ctx context.Context, in *CreateHomeRequest, opts ...grpc.CallOption) (*CreateHomeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateHomeReply)
	err := c.cc.Invoke(ctx, Home_CreateHome_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeClient) UpdateHome(ctx context.Context, in *UpdateHomeRequest, opts ...grpc.CallOption) (*UpdateHomeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateHomeReply)
	err := c.cc.Invoke(ctx, Home_UpdateHome_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeClient) DeleteHome(ctx context.Context, in *DeleteHomeRequest, opts ...grpc.CallOption) (*DeleteHomeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteHomeReply)
	err := c.cc.Invoke(ctx, Home_DeleteHome_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeClient) GetHome(ctx context.Context, in *GetHomeRequest, opts ...grpc.CallOption) (*GetHomeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHomeReply)
	err := c.cc.Invoke(ctx, Home_GetHome_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeClient) ListHome(ctx context.Context, in *ListHomeRequest, opts ...grpc.CallOption) (*ListHomeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHomeReply)
	err := c.cc.Invoke(ctx, Home_ListHome_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeClient) CreateLocal(ctx context.Context, in *CreateLocalRequest, opts ...grpc.CallOption) (*CreateLocalReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLocalReply)
	err := c.cc.Invoke(ctx, Home_CreateLocal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HomeServer is the server API for Home service.
// All implementations must embed UnimplementedHomeServer
// for forward compatibility.
type HomeServer interface {
	CreateHome(context.Context, *CreateHomeRequest) (*CreateHomeReply, error)
	UpdateHome(context.Context, *UpdateHomeRequest) (*UpdateHomeReply, error)
	DeleteHome(context.Context, *DeleteHomeRequest) (*DeleteHomeReply, error)
	GetHome(context.Context, *GetHomeRequest) (*GetHomeReply, error)
	ListHome(context.Context, *ListHomeRequest) (*ListHomeReply, error)
	CreateLocal(context.Context, *CreateLocalRequest) (*CreateLocalReply, error)
	mustEmbedUnimplementedHomeServer()
}

// UnimplementedHomeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHomeServer struct{}

func (UnimplementedHomeServer) CreateHome(context.Context, *CreateHomeRequest) (*CreateHomeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHome not implemented")
}
func (UnimplementedHomeServer) UpdateHome(context.Context, *UpdateHomeRequest) (*UpdateHomeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHome not implemented")
}
func (UnimplementedHomeServer) DeleteHome(context.Context, *DeleteHomeRequest) (*DeleteHomeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHome not implemented")
}
func (UnimplementedHomeServer) GetHome(context.Context, *GetHomeRequest) (*GetHomeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHome not implemented")
}
func (UnimplementedHomeServer) ListHome(context.Context, *ListHomeRequest) (*ListHomeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHome not implemented")
}
func (UnimplementedHomeServer) CreateLocal(context.Context, *CreateLocalRequest) (*CreateLocalReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLocal not implemented")
}
func (UnimplementedHomeServer) mustEmbedUnimplementedHomeServer() {}
func (UnimplementedHomeServer) testEmbeddedByValue()              {}

// UnsafeHomeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HomeServer will
// result in compilation errors.
type UnsafeHomeServer interface {
	mustEmbedUnimplementedHomeServer()
}

func RegisterHomeServer(s grpc.ServiceRegistrar, srv HomeServer) {
	// If the following call pancis, it indicates UnimplementedHomeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Home_ServiceDesc, srv)
}

func _Home_CreateHome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeServer).CreateHome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Home_CreateHome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeServer).CreateHome(ctx, req.(*CreateHomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Home_UpdateHome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeServer).UpdateHome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Home_UpdateHome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeServer).UpdateHome(ctx, req.(*UpdateHomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Home_DeleteHome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeServer).DeleteHome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Home_DeleteHome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeServer).DeleteHome(ctx, req.(*DeleteHomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Home_GetHome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeServer).GetHome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Home_GetHome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeServer).GetHome(ctx, req.(*GetHomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Home_ListHome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeServer).ListHome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Home_ListHome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeServer).ListHome(ctx, req.(*ListHomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Home_CreateLocal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLocalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeServer).CreateLocal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Home_CreateLocal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeServer).CreateLocal(ctx, req.(*CreateLocalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Home_ServiceDesc is the grpc.ServiceDesc for Home service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Home_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.helloworld.v1.Home",
	HandlerType: (*HomeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHome",
			Handler:    _Home_CreateHome_Handler,
		},
		{
			MethodName: "UpdateHome",
			Handler:    _Home_UpdateHome_Handler,
		},
		{
			MethodName: "DeleteHome",
			Handler:    _Home_DeleteHome_Handler,
		},
		{
			MethodName: "GetHome",
			Handler:    _Home_GetHome_Handler,
		},
		{
			MethodName: "ListHome",
			Handler:    _Home_ListHome_Handler,
		},
		{
			MethodName: "CreateLocal",
			Handler:    _Home_CreateLocal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/helloworld/v1/home.proto",
}
