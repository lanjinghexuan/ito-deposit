// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: helloworld/v1/cell.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CabinetCell_CreateCabinetCell_FullMethodName       = "/api.helloworld.v1.CabinetCell/CreateCabinetCell"
	CabinetCell_UpdateCabinetCell_FullMethodName       = "/api.helloworld.v1.CabinetCell/UpdateCabinetCell"
	CabinetCell_DeleteCabinetCell_FullMethodName       = "/api.helloworld.v1.CabinetCell/DeleteCabinetCell"
	CabinetCell_GetCabinetCell_FullMethodName          = "/api.helloworld.v1.CabinetCell/GetCabinetCell"
	CabinetCell_ListCabinetCells_FullMethodName        = "/api.helloworld.v1.CabinetCell/ListCabinetCells"
	CabinetCell_SearchCabinetCells_FullMethodName      = "/api.helloworld.v1.CabinetCell/SearchCabinetCells"
	CabinetCell_GetCabinetCellsByGroup_FullMethodName  = "/api.helloworld.v1.CabinetCell/GetCabinetCellsByGroup"
	CabinetCell_BatchCreateCabinetCells_FullMethodName = "/api.helloworld.v1.CabinetCell/BatchCreateCabinetCells"
	CabinetCell_OpenCabinetCell_FullMethodName         = "/api.helloworld.v1.CabinetCell/OpenCabinetCell"
	CabinetCell_CloseCabinetCell_FullMethodName        = "/api.helloworld.v1.CabinetCell/CloseCabinetCell"
)

// CabinetCellClient is the client API for CabinetCell service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 柜口管理服务
type CabinetCellClient interface {
	// 创建柜口
	CreateCabinetCell(ctx context.Context, in *CreateCabinetCellRequest, opts ...grpc.CallOption) (*CreateCabinetCellReply, error)
	// 更新柜口
	UpdateCabinetCell(ctx context.Context, in *UpdateCabinetCellRequest, opts ...grpc.CallOption) (*UpdateCabinetCellReply, error)
	// 删除柜口
	DeleteCabinetCell(ctx context.Context, in *DeleteCabinetCellRequest, opts ...grpc.CallOption) (*DeleteCabinetCellReply, error)
	// 获取单个柜口
	GetCabinetCell(ctx context.Context, in *GetCabinetCellRequest, opts ...grpc.CallOption) (*GetCabinetCellReply, error)
	// 获取柜口列表
	ListCabinetCells(ctx context.Context, in *ListCabinetCellsRequest, opts ...grpc.CallOption) (*ListCabinetCellsReply, error)
	// 搜索柜口
	SearchCabinetCells(ctx context.Context, in *SearchCabinetCellsRequest, opts ...grpc.CallOption) (*SearchCabinetCellsReply, error)
	// 根据柜组获取所有柜口
	GetCabinetCellsByGroup(ctx context.Context, in *GetCabinetCellsByGroupRequest, opts ...grpc.CallOption) (*GetCabinetCellsByGroupReply, error)
	// 批量创建柜口
	BatchCreateCabinetCells(ctx context.Context, in *BatchCreateCabinetCellsRequest, opts ...grpc.CallOption) (*BatchCreateCabinetCellsReply, error)
	// 开启柜口
	OpenCabinetCell(ctx context.Context, in *OpenCabinetCellRequest, opts ...grpc.CallOption) (*OpenCabinetCellReply, error)
	// 关闭柜口
	CloseCabinetCell(ctx context.Context, in *CloseCabinetCellRequest, opts ...grpc.CallOption) (*CloseCabinetCellReply, error)
}

type cabinetCellClient struct {
	cc grpc.ClientConnInterface
}

func NewCabinetCellClient(cc grpc.ClientConnInterface) CabinetCellClient {
	return &cabinetCellClient{cc}
}

func (c *cabinetCellClient) CreateCabinetCell(ctx context.Context, in *CreateCabinetCellRequest, opts ...grpc.CallOption) (*CreateCabinetCellReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCabinetCellReply)
	err := c.cc.Invoke(ctx, CabinetCell_CreateCabinetCell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cabinetCellClient) UpdateCabinetCell(ctx context.Context, in *UpdateCabinetCellRequest, opts ...grpc.CallOption) (*UpdateCabinetCellReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCabinetCellReply)
	err := c.cc.Invoke(ctx, CabinetCell_UpdateCabinetCell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cabinetCellClient) DeleteCabinetCell(ctx context.Context, in *DeleteCabinetCellRequest, opts ...grpc.CallOption) (*DeleteCabinetCellReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCabinetCellReply)
	err := c.cc.Invoke(ctx, CabinetCell_DeleteCabinetCell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cabinetCellClient) GetCabinetCell(ctx context.Context, in *GetCabinetCellRequest, opts ...grpc.CallOption) (*GetCabinetCellReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCabinetCellReply)
	err := c.cc.Invoke(ctx, CabinetCell_GetCabinetCell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cabinetCellClient) ListCabinetCells(ctx context.Context, in *ListCabinetCellsRequest, opts ...grpc.CallOption) (*ListCabinetCellsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCabinetCellsReply)
	err := c.cc.Invoke(ctx, CabinetCell_ListCabinetCells_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cabinetCellClient) SearchCabinetCells(ctx context.Context, in *SearchCabinetCellsRequest, opts ...grpc.CallOption) (*SearchCabinetCellsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchCabinetCellsReply)
	err := c.cc.Invoke(ctx, CabinetCell_SearchCabinetCells_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cabinetCellClient) GetCabinetCellsByGroup(ctx context.Context, in *GetCabinetCellsByGroupRequest, opts ...grpc.CallOption) (*GetCabinetCellsByGroupReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCabinetCellsByGroupReply)
	err := c.cc.Invoke(ctx, CabinetCell_GetCabinetCellsByGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cabinetCellClient) BatchCreateCabinetCells(ctx context.Context, in *BatchCreateCabinetCellsRequest, opts ...grpc.CallOption) (*BatchCreateCabinetCellsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCreateCabinetCellsReply)
	err := c.cc.Invoke(ctx, CabinetCell_BatchCreateCabinetCells_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cabinetCellClient) OpenCabinetCell(ctx context.Context, in *OpenCabinetCellRequest, opts ...grpc.CallOption) (*OpenCabinetCellReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenCabinetCellReply)
	err := c.cc.Invoke(ctx, CabinetCell_OpenCabinetCell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cabinetCellClient) CloseCabinetCell(ctx context.Context, in *CloseCabinetCellRequest, opts ...grpc.CallOption) (*CloseCabinetCellReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseCabinetCellReply)
	err := c.cc.Invoke(ctx, CabinetCell_CloseCabinetCell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CabinetCellServer is the server API for CabinetCell service.
// All implementations must embed UnimplementedCabinetCellServer
// for forward compatibility.
//
// 柜口管理服务
type CabinetCellServer interface {
	// 创建柜口
	CreateCabinetCell(context.Context, *CreateCabinetCellRequest) (*CreateCabinetCellReply, error)
	// 更新柜口
	UpdateCabinetCell(context.Context, *UpdateCabinetCellRequest) (*UpdateCabinetCellReply, error)
	// 删除柜口
	DeleteCabinetCell(context.Context, *DeleteCabinetCellRequest) (*DeleteCabinetCellReply, error)
	// 获取单个柜口
	GetCabinetCell(context.Context, *GetCabinetCellRequest) (*GetCabinetCellReply, error)
	// 获取柜口列表
	ListCabinetCells(context.Context, *ListCabinetCellsRequest) (*ListCabinetCellsReply, error)
	// 搜索柜口
	SearchCabinetCells(context.Context, *SearchCabinetCellsRequest) (*SearchCabinetCellsReply, error)
	// 根据柜组获取所有柜口
	GetCabinetCellsByGroup(context.Context, *GetCabinetCellsByGroupRequest) (*GetCabinetCellsByGroupReply, error)
	// 批量创建柜口
	BatchCreateCabinetCells(context.Context, *BatchCreateCabinetCellsRequest) (*BatchCreateCabinetCellsReply, error)
	// 开启柜口
	OpenCabinetCell(context.Context, *OpenCabinetCellRequest) (*OpenCabinetCellReply, error)
	// 关闭柜口
	CloseCabinetCell(context.Context, *CloseCabinetCellRequest) (*CloseCabinetCellReply, error)
	mustEmbedUnimplementedCabinetCellServer()
}

// UnimplementedCabinetCellServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCabinetCellServer struct{}

func (UnimplementedCabinetCellServer) CreateCabinetCell(context.Context, *CreateCabinetCellRequest) (*CreateCabinetCellReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCabinetCell not implemented")
}
func (UnimplementedCabinetCellServer) UpdateCabinetCell(context.Context, *UpdateCabinetCellRequest) (*UpdateCabinetCellReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCabinetCell not implemented")
}
func (UnimplementedCabinetCellServer) DeleteCabinetCell(context.Context, *DeleteCabinetCellRequest) (*DeleteCabinetCellReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCabinetCell not implemented")
}
func (UnimplementedCabinetCellServer) GetCabinetCell(context.Context, *GetCabinetCellRequest) (*GetCabinetCellReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCabinetCell not implemented")
}
func (UnimplementedCabinetCellServer) ListCabinetCells(context.Context, *ListCabinetCellsRequest) (*ListCabinetCellsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCabinetCells not implemented")
}
func (UnimplementedCabinetCellServer) SearchCabinetCells(context.Context, *SearchCabinetCellsRequest) (*SearchCabinetCellsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCabinetCells not implemented")
}
func (UnimplementedCabinetCellServer) GetCabinetCellsByGroup(context.Context, *GetCabinetCellsByGroupRequest) (*GetCabinetCellsByGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCabinetCellsByGroup not implemented")
}
func (UnimplementedCabinetCellServer) BatchCreateCabinetCells(context.Context, *BatchCreateCabinetCellsRequest) (*BatchCreateCabinetCellsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateCabinetCells not implemented")
}
func (UnimplementedCabinetCellServer) OpenCabinetCell(context.Context, *OpenCabinetCellRequest) (*OpenCabinetCellReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenCabinetCell not implemented")
}
func (UnimplementedCabinetCellServer) CloseCabinetCell(context.Context, *CloseCabinetCellRequest) (*CloseCabinetCellReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseCabinetCell not implemented")
}
func (UnimplementedCabinetCellServer) mustEmbedUnimplementedCabinetCellServer() {}
func (UnimplementedCabinetCellServer) testEmbeddedByValue()                     {}

// UnsafeCabinetCellServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CabinetCellServer will
// result in compilation errors.
type UnsafeCabinetCellServer interface {
	mustEmbedUnimplementedCabinetCellServer()
}

func RegisterCabinetCellServer(s grpc.ServiceRegistrar, srv CabinetCellServer) {
	// If the following call pancis, it indicates UnimplementedCabinetCellServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CabinetCell_ServiceDesc, srv)
}

func _CabinetCell_CreateCabinetCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCabinetCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetCellServer).CreateCabinetCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CabinetCell_CreateCabinetCell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetCellServer).CreateCabinetCell(ctx, req.(*CreateCabinetCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CabinetCell_UpdateCabinetCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCabinetCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetCellServer).UpdateCabinetCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CabinetCell_UpdateCabinetCell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetCellServer).UpdateCabinetCell(ctx, req.(*UpdateCabinetCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CabinetCell_DeleteCabinetCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCabinetCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetCellServer).DeleteCabinetCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CabinetCell_DeleteCabinetCell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetCellServer).DeleteCabinetCell(ctx, req.(*DeleteCabinetCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CabinetCell_GetCabinetCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCabinetCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetCellServer).GetCabinetCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CabinetCell_GetCabinetCell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetCellServer).GetCabinetCell(ctx, req.(*GetCabinetCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CabinetCell_ListCabinetCells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCabinetCellsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetCellServer).ListCabinetCells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CabinetCell_ListCabinetCells_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetCellServer).ListCabinetCells(ctx, req.(*ListCabinetCellsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CabinetCell_SearchCabinetCells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCabinetCellsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetCellServer).SearchCabinetCells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CabinetCell_SearchCabinetCells_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetCellServer).SearchCabinetCells(ctx, req.(*SearchCabinetCellsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CabinetCell_GetCabinetCellsByGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCabinetCellsByGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetCellServer).GetCabinetCellsByGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CabinetCell_GetCabinetCellsByGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetCellServer).GetCabinetCellsByGroup(ctx, req.(*GetCabinetCellsByGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CabinetCell_BatchCreateCabinetCells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateCabinetCellsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetCellServer).BatchCreateCabinetCells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CabinetCell_BatchCreateCabinetCells_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetCellServer).BatchCreateCabinetCells(ctx, req.(*BatchCreateCabinetCellsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CabinetCell_OpenCabinetCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenCabinetCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetCellServer).OpenCabinetCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CabinetCell_OpenCabinetCell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetCellServer).OpenCabinetCell(ctx, req.(*OpenCabinetCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CabinetCell_CloseCabinetCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseCabinetCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetCellServer).CloseCabinetCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CabinetCell_CloseCabinetCell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetCellServer).CloseCabinetCell(ctx, req.(*CloseCabinetCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CabinetCell_ServiceDesc is the grpc.ServiceDesc for CabinetCell service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CabinetCell_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.helloworld.v1.CabinetCell",
	HandlerType: (*CabinetCellServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCabinetCell",
			Handler:    _CabinetCell_CreateCabinetCell_Handler,
		},
		{
			MethodName: "UpdateCabinetCell",
			Handler:    _CabinetCell_UpdateCabinetCell_Handler,
		},
		{
			MethodName: "DeleteCabinetCell",
			Handler:    _CabinetCell_DeleteCabinetCell_Handler,
		},
		{
			MethodName: "GetCabinetCell",
			Handler:    _CabinetCell_GetCabinetCell_Handler,
		},
		{
			MethodName: "ListCabinetCells",
			Handler:    _CabinetCell_ListCabinetCells_Handler,
		},
		{
			MethodName: "SearchCabinetCells",
			Handler:    _CabinetCell_SearchCabinetCells_Handler,
		},
		{
			MethodName: "GetCabinetCellsByGroup",
			Handler:    _CabinetCell_GetCabinetCellsByGroup_Handler,
		},
		{
			MethodName: "BatchCreateCabinetCells",
			Handler:    _CabinetCell_BatchCreateCabinetCells_Handler,
		},
		{
			MethodName: "OpenCabinetCell",
			Handler:    _CabinetCell_OpenCabinetCell_Handler,
		},
		{
			MethodName: "CloseCabinetCell",
			Handler:    _CabinetCell_CloseCabinetCell_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/v1/cell.proto",
}
