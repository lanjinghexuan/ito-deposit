// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: helloworld/v1/city.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	City_CreateCity_FullMethodName       = "/api.helloworld.v1.City/CreateCity"
	City_UpdateCity_FullMethodName       = "/api.helloworld.v1.City/UpdateCity"
	City_GetCity_FullMethodName          = "/api.helloworld.v1.City/GetCity"
	City_ListCities_FullMethodName       = "/api.helloworld.v1.City/ListCities"
	City_UpdateCityStatus_FullMethodName = "/api.helloworld.v1.City/UpdateCityStatus"
	City_ListUserCities_FullMethodName   = "/api.helloworld.v1.City/ListUserCities"
	City_SearchCities_FullMethodName     = "/api.helloworld.v1.City/SearchCities"
	City_GetUserCity_FullMethodName      = "/api.helloworld.v1.City/GetUserCity"
	City_GetCityByCode_FullMethodName    = "/api.helloworld.v1.City/GetCityByCode"
	City_GetHotCities_FullMethodName     = "/api.helloworld.v1.City/GetHotCities"
)

// CityClient is the client API for City service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 城市服务定义
type CityClient interface {
	// 创建城市 (管理端)
	CreateCity(ctx context.Context, in *CreateCityRequest, opts ...grpc.CallOption) (*CreateCityReply, error)
	// 更新城市 (管理端)
	UpdateCity(ctx context.Context, in *UpdateCityRequest, opts ...grpc.CallOption) (*UpdateCityReply, error)
	// 获取城市详情 (管理端)
	GetCity(ctx context.Context, in *GetCityRequest, opts ...grpc.CallOption) (*GetCityReply, error)
	// 获取城市列表 (管理端)
	ListCities(ctx context.Context, in *ListCitiesRequest, opts ...grpc.CallOption) (*ListCitiesReply, error)
	// 更新城市状态 (管理端)
	UpdateCityStatus(ctx context.Context, in *UpdateCityStatusRequest, opts ...grpc.CallOption) (*UpdateCityStatusReply, error)
	// 获取城市列表 (用户端)
	ListUserCities(ctx context.Context, in *ListUserCitiesRequest, opts ...grpc.CallOption) (*ListUserCitiesReply, error)
	// 搜索城市 (用户端)
	SearchCities(ctx context.Context, in *SearchCitiesRequest, opts ...grpc.CallOption) (*SearchCitiesReply, error)
	// 获取城市详情 (用户端)
	GetUserCity(ctx context.Context, in *GetUserCityRequest, opts ...grpc.CallOption) (*GetUserCityReply, error)
	// 根据城市编码获取城市 (用户端)
	GetCityByCode(ctx context.Context, in *GetCityByCodeRequest, opts ...grpc.CallOption) (*GetUserCityReply, error)
	// 获取热门城市 (用户端)
	GetHotCities(ctx context.Context, in *GetHotCitiesRequest, opts ...grpc.CallOption) (*ListUserCitiesReply, error)
}

type cityClient struct {
	cc grpc.ClientConnInterface
}

func NewCityClient(cc grpc.ClientConnInterface) CityClient {
	return &cityClient{cc}
}

func (c *cityClient) CreateCity(ctx context.Context, in *CreateCityRequest, opts ...grpc.CallOption) (*CreateCityReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCityReply)
	err := c.cc.Invoke(ctx, City_CreateCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityClient) UpdateCity(ctx context.Context, in *UpdateCityRequest, opts ...grpc.CallOption) (*UpdateCityReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCityReply)
	err := c.cc.Invoke(ctx, City_UpdateCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityClient) GetCity(ctx context.Context, in *GetCityRequest, opts ...grpc.CallOption) (*GetCityReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCityReply)
	err := c.cc.Invoke(ctx, City_GetCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityClient) ListCities(ctx context.Context, in *ListCitiesRequest, opts ...grpc.CallOption) (*ListCitiesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCitiesReply)
	err := c.cc.Invoke(ctx, City_ListCities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityClient) UpdateCityStatus(ctx context.Context, in *UpdateCityStatusRequest, opts ...grpc.CallOption) (*UpdateCityStatusReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCityStatusReply)
	err := c.cc.Invoke(ctx, City_UpdateCityStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityClient) ListUserCities(ctx context.Context, in *ListUserCitiesRequest, opts ...grpc.CallOption) (*ListUserCitiesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserCitiesReply)
	err := c.cc.Invoke(ctx, City_ListUserCities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityClient) SearchCities(ctx context.Context, in *SearchCitiesRequest, opts ...grpc.CallOption) (*SearchCitiesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchCitiesReply)
	err := c.cc.Invoke(ctx, City_SearchCities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityClient) GetUserCity(ctx context.Context, in *GetUserCityRequest, opts ...grpc.CallOption) (*GetUserCityReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserCityReply)
	err := c.cc.Invoke(ctx, City_GetUserCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityClient) GetCityByCode(ctx context.Context, in *GetCityByCodeRequest, opts ...grpc.CallOption) (*GetUserCityReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserCityReply)
	err := c.cc.Invoke(ctx, City_GetCityByCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityClient) GetHotCities(ctx context.Context, in *GetHotCitiesRequest, opts ...grpc.CallOption) (*ListUserCitiesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserCitiesReply)
	err := c.cc.Invoke(ctx, City_GetHotCities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CityServer is the server API for City service.
// All implementations must embed UnimplementedCityServer
// for forward compatibility.
//
// 城市服务定义
type CityServer interface {
	// 创建城市 (管理端)
	CreateCity(context.Context, *CreateCityRequest) (*CreateCityReply, error)
	// 更新城市 (管理端)
	UpdateCity(context.Context, *UpdateCityRequest) (*UpdateCityReply, error)
	// 获取城市详情 (管理端)
	GetCity(context.Context, *GetCityRequest) (*GetCityReply, error)
	// 获取城市列表 (管理端)
	ListCities(context.Context, *ListCitiesRequest) (*ListCitiesReply, error)
	// 更新城市状态 (管理端)
	UpdateCityStatus(context.Context, *UpdateCityStatusRequest) (*UpdateCityStatusReply, error)
	// 获取城市列表 (用户端)
	ListUserCities(context.Context, *ListUserCitiesRequest) (*ListUserCitiesReply, error)
	// 搜索城市 (用户端)
	SearchCities(context.Context, *SearchCitiesRequest) (*SearchCitiesReply, error)
	// 获取城市详情 (用户端)
	GetUserCity(context.Context, *GetUserCityRequest) (*GetUserCityReply, error)
	// 根据城市编码获取城市 (用户端)
	GetCityByCode(context.Context, *GetCityByCodeRequest) (*GetUserCityReply, error)
	// 获取热门城市 (用户端)
	GetHotCities(context.Context, *GetHotCitiesRequest) (*ListUserCitiesReply, error)
	mustEmbedUnimplementedCityServer()
}

// UnimplementedCityServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCityServer struct{}

func (UnimplementedCityServer) CreateCity(context.Context, *CreateCityRequest) (*CreateCityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCity not implemented")
}
func (UnimplementedCityServer) UpdateCity(context.Context, *UpdateCityRequest) (*UpdateCityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCity not implemented")
}
func (UnimplementedCityServer) GetCity(context.Context, *GetCityRequest) (*GetCityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCity not implemented")
}
func (UnimplementedCityServer) ListCities(context.Context, *ListCitiesRequest) (*ListCitiesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCities not implemented")
}
func (UnimplementedCityServer) UpdateCityStatus(context.Context, *UpdateCityStatusRequest) (*UpdateCityStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCityStatus not implemented")
}
func (UnimplementedCityServer) ListUserCities(context.Context, *ListUserCitiesRequest) (*ListUserCitiesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserCities not implemented")
}
func (UnimplementedCityServer) SearchCities(context.Context, *SearchCitiesRequest) (*SearchCitiesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCities not implemented")
}
func (UnimplementedCityServer) GetUserCity(context.Context, *GetUserCityRequest) (*GetUserCityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCity not implemented")
}
func (UnimplementedCityServer) GetCityByCode(context.Context, *GetCityByCodeRequest) (*GetUserCityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCityByCode not implemented")
}
func (UnimplementedCityServer) GetHotCities(context.Context, *GetHotCitiesRequest) (*ListUserCitiesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotCities not implemented")
}
func (UnimplementedCityServer) mustEmbedUnimplementedCityServer() {}
func (UnimplementedCityServer) testEmbeddedByValue()              {}

// UnsafeCityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CityServer will
// result in compilation errors.
type UnsafeCityServer interface {
	mustEmbedUnimplementedCityServer()
}

func RegisterCityServer(s grpc.ServiceRegistrar, srv CityServer) {
	// If the following call pancis, it indicates UnimplementedCityServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&City_ServiceDesc, srv)
}

func _City_CreateCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServer).CreateCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: City_CreateCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServer).CreateCity(ctx, req.(*CreateCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _City_UpdateCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServer).UpdateCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: City_UpdateCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServer).UpdateCity(ctx, req.(*UpdateCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _City_GetCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServer).GetCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: City_GetCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServer).GetCity(ctx, req.(*GetCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _City_ListCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServer).ListCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: City_ListCities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServer).ListCities(ctx, req.(*ListCitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _City_UpdateCityStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCityStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServer).UpdateCityStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: City_UpdateCityStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServer).UpdateCityStatus(ctx, req.(*UpdateCityStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _City_ListUserCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserCitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServer).ListUserCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: City_ListUserCities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServer).ListUserCities(ctx, req.(*ListUserCitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _City_SearchCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServer).SearchCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: City_SearchCities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServer).SearchCities(ctx, req.(*SearchCitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _City_GetUserCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServer).GetUserCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: City_GetUserCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServer).GetUserCity(ctx, req.(*GetUserCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _City_GetCityByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCityByCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServer).GetCityByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: City_GetCityByCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServer).GetCityByCode(ctx, req.(*GetCityByCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _City_GetHotCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotCitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServer).GetHotCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: City_GetHotCities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServer).GetHotCities(ctx, req.(*GetHotCitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// City_ServiceDesc is the grpc.ServiceDesc for City service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var City_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.helloworld.v1.City",
	HandlerType: (*CityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCity",
			Handler:    _City_CreateCity_Handler,
		},
		{
			MethodName: "UpdateCity",
			Handler:    _City_UpdateCity_Handler,
		},
		{
			MethodName: "GetCity",
			Handler:    _City_GetCity_Handler,
		},
		{
			MethodName: "ListCities",
			Handler:    _City_ListCities_Handler,
		},
		{
			MethodName: "UpdateCityStatus",
			Handler:    _City_UpdateCityStatus_Handler,
		},
		{
			MethodName: "ListUserCities",
			Handler:    _City_ListUserCities_Handler,
		},
		{
			MethodName: "SearchCities",
			Handler:    _City_SearchCities_Handler,
		},
		{
			MethodName: "GetUserCity",
			Handler:    _City_GetUserCity_Handler,
		},
		{
			MethodName: "GetCityByCode",
			Handler:    _City_GetCityByCode_Handler,
		},
		{
			MethodName: "GetHotCities",
			Handler:    _City_GetHotCities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/v1/city.proto",
}
