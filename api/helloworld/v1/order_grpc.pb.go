// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: helloworld/v1/order.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Order_CreateOrder_FullMethodName         = "/api.helloworld.v1.Order/CreateOrder"
	Order_UpdateOrder_FullMethodName         = "/api.helloworld.v1.Order/UpdateOrder"
	Order_DeleteOrder_FullMethodName         = "/api.helloworld.v1.Order/DeleteOrder"
	Order_GetOrder_FullMethodName            = "/api.helloworld.v1.Order/GetOrder"
	Order_ListOrder_FullMethodName           = "/api.helloworld.v1.Order/ListOrder"
	Order_ShowOrder_FullMethodName           = "/api.helloworld.v1.Order/ShowOrder"
	Order_CreateLockerStorage_FullMethodName = "/api.helloworld.v1.Order/CreateLockerStorage"
	Order_HandleRemindTask_FullMethodName    = "/api.helloworld.v1.Order/HandleRemindTask"
	Order_HandleTimeOutTask_FullMethodName   = "/api.helloworld.v1.Order/HandleTimeOutTask"
	Order_ManageOrderSearch_FullMethodName   = "/api.helloworld.v1.Order/ManageOrderSearch"
	Order_ManageOrderDel_FullMethodName      = "/api.helloworld.v1.Order/ManageOrderDel"
	Order_ManageOrder_FullMethodName         = "/api.helloworld.v1.Order/ManageOrder"
	Order_ManageOrderDetail_FullMethodName   = "/api.helloworld.v1.Order/ManageOrderDetail"
)

// OrderClient is the client API for Order service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderClient interface {
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderReply, error)
	UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*UpdateOrderReply, error)
	DeleteOrder(ctx context.Context, in *DeleteOrderRequest, opts ...grpc.CallOption) (*DeleteOrderReply, error)
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderReply, error)
	ListOrder(ctx context.Context, in *ListOrderRequest, opts ...grpc.CallOption) (*ListOrderReply, error)
	ShowOrder(ctx context.Context, in *ShowOrderRequest, opts ...grpc.CallOption) (*ShowOrderReply, error)
	CreateLockerStorage(ctx context.Context, in *CreateLockerStorageRequest, opts ...grpc.CallOption) (*CreateLockerStorageReply, error)
	HandleRemindTask(ctx context.Context, in *HandleRemindTaskRequest, opts ...grpc.CallOption) (*HandleRemindTaskReply, error)
	HandleTimeOutTask(ctx context.Context, in *HandleTimeOutTaskRequest, opts ...grpc.CallOption) (*HandleTimeOutTaskReply, error)
	ManageOrderSearch(ctx context.Context, in *ManageOrderSearchRequest, opts ...grpc.CallOption) (*ManageOrderSearchReply, error)
	ManageOrderDel(ctx context.Context, in *ManageOrderDelRequest, opts ...grpc.CallOption) (*ManageOrderDelReply, error)
	ManageOrder(ctx context.Context, in *ManageOrderDelRequest, opts ...grpc.CallOption) (*ManageOrderDelReply, error)
	ManageOrderDetail(ctx context.Context, in *ManageOrderDetailRequest, opts ...grpc.CallOption) (*ManageOrderDetailReply, error)
}

type orderClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderClient(cc grpc.ClientConnInterface) OrderClient {
	return &orderClient{cc}
}

func (c *orderClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrderReply)
	err := c.cc.Invoke(ctx, Order_CreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*UpdateOrderReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrderReply)
	err := c.cc.Invoke(ctx, Order_UpdateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) DeleteOrder(ctx context.Context, in *DeleteOrderRequest, opts ...grpc.CallOption) (*DeleteOrderReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOrderReply)
	err := c.cc.Invoke(ctx, Order_DeleteOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderReply)
	err := c.cc.Invoke(ctx, Order_GetOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) ListOrder(ctx context.Context, in *ListOrderRequest, opts ...grpc.CallOption) (*ListOrderReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrderReply)
	err := c.cc.Invoke(ctx, Order_ListOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) ShowOrder(ctx context.Context, in *ShowOrderRequest, opts ...grpc.CallOption) (*ShowOrderReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShowOrderReply)
	err := c.cc.Invoke(ctx, Order_ShowOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) CreateLockerStorage(ctx context.Context, in *CreateLockerStorageRequest, opts ...grpc.CallOption) (*CreateLockerStorageReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLockerStorageReply)
	err := c.cc.Invoke(ctx, Order_CreateLockerStorage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) HandleRemindTask(ctx context.Context, in *HandleRemindTaskRequest, opts ...grpc.CallOption) (*HandleRemindTaskReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandleRemindTaskReply)
	err := c.cc.Invoke(ctx, Order_HandleRemindTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) HandleTimeOutTask(ctx context.Context, in *HandleTimeOutTaskRequest, opts ...grpc.CallOption) (*HandleTimeOutTaskReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandleTimeOutTaskReply)
	err := c.cc.Invoke(ctx, Order_HandleTimeOutTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) ManageOrderSearch(ctx context.Context, in *ManageOrderSearchRequest, opts ...grpc.CallOption) (*ManageOrderSearchReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ManageOrderSearchReply)
	err := c.cc.Invoke(ctx, Order_ManageOrderSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) ManageOrderDel(ctx context.Context, in *ManageOrderDelRequest, opts ...grpc.CallOption) (*ManageOrderDelReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ManageOrderDelReply)
	err := c.cc.Invoke(ctx, Order_ManageOrderDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) ManageOrder(ctx context.Context, in *ManageOrderDelRequest, opts ...grpc.CallOption) (*ManageOrderDelReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ManageOrderDelReply)
	err := c.cc.Invoke(ctx, Order_ManageOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) ManageOrderDetail(ctx context.Context, in *ManageOrderDetailRequest, opts ...grpc.CallOption) (*ManageOrderDetailReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ManageOrderDetailReply)
	err := c.cc.Invoke(ctx, Order_ManageOrderDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServer is the server API for Order service.
// All implementations must embed UnimplementedOrderServer
// for forward compatibility.
type OrderServer interface {
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderReply, error)
	UpdateOrder(context.Context, *UpdateOrderRequest) (*UpdateOrderReply, error)
	DeleteOrder(context.Context, *DeleteOrderRequest) (*DeleteOrderReply, error)
	GetOrder(context.Context, *GetOrderRequest) (*GetOrderReply, error)
	ListOrder(context.Context, *ListOrderRequest) (*ListOrderReply, error)
	ShowOrder(context.Context, *ShowOrderRequest) (*ShowOrderReply, error)
	CreateLockerStorage(context.Context, *CreateLockerStorageRequest) (*CreateLockerStorageReply, error)
	HandleRemindTask(context.Context, *HandleRemindTaskRequest) (*HandleRemindTaskReply, error)
	HandleTimeOutTask(context.Context, *HandleTimeOutTaskRequest) (*HandleTimeOutTaskReply, error)
	ManageOrderSearch(context.Context, *ManageOrderSearchRequest) (*ManageOrderSearchReply, error)
	ManageOrderDel(context.Context, *ManageOrderDelRequest) (*ManageOrderDelReply, error)
	ManageOrder(context.Context, *ManageOrderDelRequest) (*ManageOrderDelReply, error)
	ManageOrderDetail(context.Context, *ManageOrderDetailRequest) (*ManageOrderDetailReply, error)
	mustEmbedUnimplementedOrderServer()
}

// UnimplementedOrderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderServer struct{}

func (UnimplementedOrderServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderServer) UpdateOrder(context.Context, *UpdateOrderRequest) (*UpdateOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (UnimplementedOrderServer) DeleteOrder(context.Context, *DeleteOrderRequest) (*DeleteOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (UnimplementedOrderServer) GetOrder(context.Context, *GetOrderRequest) (*GetOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedOrderServer) ListOrder(context.Context, *ListOrderRequest) (*ListOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrder not implemented")
}
func (UnimplementedOrderServer) ShowOrder(context.Context, *ShowOrderRequest) (*ShowOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowOrder not implemented")
}
func (UnimplementedOrderServer) CreateLockerStorage(context.Context, *CreateLockerStorageRequest) (*CreateLockerStorageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLockerStorage not implemented")
}
func (UnimplementedOrderServer) HandleRemindTask(context.Context, *HandleRemindTaskRequest) (*HandleRemindTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleRemindTask not implemented")
}
func (UnimplementedOrderServer) HandleTimeOutTask(context.Context, *HandleTimeOutTaskRequest) (*HandleTimeOutTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleTimeOutTask not implemented")
}
func (UnimplementedOrderServer) ManageOrderSearch(context.Context, *ManageOrderSearchRequest) (*ManageOrderSearchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageOrderSearch not implemented")
}
func (UnimplementedOrderServer) ManageOrderDel(context.Context, *ManageOrderDelRequest) (*ManageOrderDelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageOrderDel not implemented")
}
func (UnimplementedOrderServer) ManageOrder(context.Context, *ManageOrderDelRequest) (*ManageOrderDelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageOrder not implemented")
}
func (UnimplementedOrderServer) ManageOrderDetail(context.Context, *ManageOrderDetailRequest) (*ManageOrderDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageOrderDetail not implemented")
}
func (UnimplementedOrderServer) mustEmbedUnimplementedOrderServer() {}
func (UnimplementedOrderServer) testEmbeddedByValue()               {}

// UnsafeOrderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServer will
// result in compilation errors.
type UnsafeOrderServer interface {
	mustEmbedUnimplementedOrderServer()
}

func RegisterOrderServer(s grpc.ServiceRegistrar, srv OrderServer) {
	// If the following call pancis, it indicates UnimplementedOrderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Order_ServiceDesc, srv)
}

func _Order_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_UpdateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).UpdateOrder(ctx, req.(*UpdateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_DeleteOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).DeleteOrder(ctx, req.(*DeleteOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_ListOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).ListOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_ListOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).ListOrder(ctx, req.(*ListOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_ShowOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).ShowOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_ShowOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).ShowOrder(ctx, req.(*ShowOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_CreateLockerStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLockerStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).CreateLockerStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_CreateLockerStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).CreateLockerStorage(ctx, req.(*CreateLockerStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_HandleRemindTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleRemindTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).HandleRemindTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_HandleRemindTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).HandleRemindTask(ctx, req.(*HandleRemindTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_HandleTimeOutTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleTimeOutTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).HandleTimeOutTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_HandleTimeOutTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).HandleTimeOutTask(ctx, req.(*HandleTimeOutTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_ManageOrderSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageOrderSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).ManageOrderSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_ManageOrderSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).ManageOrderSearch(ctx, req.(*ManageOrderSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_ManageOrderDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageOrderDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).ManageOrderDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_ManageOrderDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).ManageOrderDel(ctx, req.(*ManageOrderDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_ManageOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageOrderDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).ManageOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_ManageOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).ManageOrder(ctx, req.(*ManageOrderDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_ManageOrderDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageOrderDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).ManageOrderDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_ManageOrderDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).ManageOrderDetail(ctx, req.(*ManageOrderDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Order_ServiceDesc is the grpc.ServiceDesc for Order service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Order_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.helloworld.v1.Order",
	HandlerType: (*OrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _Order_CreateOrder_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _Order_UpdateOrder_Handler,
		},
		{
			MethodName: "DeleteOrder",
			Handler:    _Order_DeleteOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _Order_GetOrder_Handler,
		},
		{
			MethodName: "ListOrder",
			Handler:    _Order_ListOrder_Handler,
		},
		{
			MethodName: "ShowOrder",
			Handler:    _Order_ShowOrder_Handler,
		},
		{
			MethodName: "CreateLockerStorage",
			Handler:    _Order_CreateLockerStorage_Handler,
		},
		{
			MethodName: "HandleRemindTask",
			Handler:    _Order_HandleRemindTask_Handler,
		},
		{
			MethodName: "HandleTimeOutTask",
			Handler:    _Order_HandleTimeOutTask_Handler,
		},
		{
			MethodName: "ManageOrderSearch",
			Handler:    _Order_ManageOrderSearch_Handler,
		},
		{
			MethodName: "ManageOrderDel",
			Handler:    _Order_ManageOrderDel_Handler,
		},
		{
			MethodName: "ManageOrder",
			Handler:    _Order_ManageOrder_Handler,
		},
		{
			MethodName: "ManageOrderDetail",
			Handler:    _Order_ManageOrderDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/v1/order.proto",
}
