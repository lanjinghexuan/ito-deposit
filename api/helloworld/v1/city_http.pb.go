// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.19.4
// source: helloworld/v1/city.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCityCreateCity = "/api.helloworld.v1.City/CreateCity"
const OperationCityGetCity = "/api.helloworld.v1.City/GetCity"
const OperationCityGetCityByCode = "/api.helloworld.v1.City/GetCityByCode"
const OperationCityGetHotCities = "/api.helloworld.v1.City/GetHotCities"
const OperationCityGetUserCity = "/api.helloworld.v1.City/GetUserCity"
const OperationCityListCities = "/api.helloworld.v1.City/ListCities"
const OperationCityListUserCities = "/api.helloworld.v1.City/ListUserCities"
const OperationCitySearchCities = "/api.helloworld.v1.City/SearchCities"
const OperationCityUpdateCity = "/api.helloworld.v1.City/UpdateCity"
const OperationCityUpdateCityStatus = "/api.helloworld.v1.City/UpdateCityStatus"

type CityHTTPServer interface {
	// CreateCity 创建城市 (管理端)
	CreateCity(context.Context, *CreateCityRequest) (*CreateCityReply, error)
	// GetCity 获取城市详情 (管理端)
	GetCity(context.Context, *GetCityRequest) (*GetCityReply, error)
	// GetCityByCode 根据城市编码获取城市 (用户端)
	GetCityByCode(context.Context, *GetCityByCodeRequest) (*GetUserCityReply, error)
	// GetHotCities 获取热门城市 (用户端)
	GetHotCities(context.Context, *GetHotCitiesRequest) (*ListUserCitiesReply, error)
	// GetUserCity 获取城市详情 (用户端)
	GetUserCity(context.Context, *GetUserCityRequest) (*GetUserCityReply, error)
	// ListCities 获取城市列表 (管理端)
	ListCities(context.Context, *ListCitiesRequest) (*ListCitiesReply, error)
	// ListUserCities 获取城市列表 (用户端)
	ListUserCities(context.Context, *ListUserCitiesRequest) (*ListUserCitiesReply, error)
	// SearchCities 搜索城市 (用户端)
	SearchCities(context.Context, *SearchCitiesRequest) (*SearchCitiesReply, error)
	// UpdateCity 更新城市 (管理端)
	UpdateCity(context.Context, *UpdateCityRequest) (*UpdateCityReply, error)
	// UpdateCityStatus 更新城市状态 (管理端)
	UpdateCityStatus(context.Context, *UpdateCityStatusRequest) (*UpdateCityStatusReply, error)
}

func RegisterCityHTTPServer(s *http.Server, srv CityHTTPServer) {
	r := s.Route("/")
	r.POST("/api/admin/cities", _City_CreateCity0_HTTP_Handler(srv))
	r.PUT("/api/admin/cities/{id}", _City_UpdateCity0_HTTP_Handler(srv))
	r.GET("/api/admin/cities/{id}", _City_GetCity0_HTTP_Handler(srv))
	r.GET("/api/admin/cities", _City_ListCities0_HTTP_Handler(srv))
	r.PATCH("/api/admin/cities/{id}/status", _City_UpdateCityStatus0_HTTP_Handler(srv))
	r.GET("/api/cities", _City_ListUserCities0_HTTP_Handler(srv))
	r.GET("/api/cities/search", _City_SearchCities0_HTTP_Handler(srv))
	r.GET("/api/cities/{id}", _City_GetUserCity0_HTTP_Handler(srv))
	r.GET("/api/cities/code/{code}", _City_GetCityByCode0_HTTP_Handler(srv))
	r.GET("/api/cities/hot", _City_GetHotCities0_HTTP_Handler(srv))
}

func _City_CreateCity0_HTTP_Handler(srv CityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCityRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCityCreateCity)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCity(ctx, req.(*CreateCityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCityReply)
		return ctx.Result(200, reply)
	}
}

func _City_UpdateCity0_HTTP_Handler(srv CityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCityRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCityUpdateCity)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCity(ctx, req.(*UpdateCityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCityReply)
		return ctx.Result(200, reply)
	}
}

func _City_GetCity0_HTTP_Handler(srv CityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCityRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCityGetCity)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCity(ctx, req.(*GetCityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCityReply)
		return ctx.Result(200, reply)
	}
}

func _City_ListCities0_HTTP_Handler(srv CityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCitiesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCityListCities)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCities(ctx, req.(*ListCitiesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCitiesReply)
		return ctx.Result(200, reply)
	}
}

func _City_UpdateCityStatus0_HTTP_Handler(srv CityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCityStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCityUpdateCityStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCityStatus(ctx, req.(*UpdateCityStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCityStatusReply)
		return ctx.Result(200, reply)
	}
}

func _City_ListUserCities0_HTTP_Handler(srv CityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserCitiesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCityListUserCities)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserCities(ctx, req.(*ListUserCitiesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserCitiesReply)
		return ctx.Result(200, reply)
	}
}

func _City_SearchCities0_HTTP_Handler(srv CityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchCitiesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCitySearchCities)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchCities(ctx, req.(*SearchCitiesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchCitiesReply)
		return ctx.Result(200, reply)
	}
}

func _City_GetUserCity0_HTTP_Handler(srv CityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserCityRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCityGetUserCity)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserCity(ctx, req.(*GetUserCityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserCityReply)
		return ctx.Result(200, reply)
	}
}

func _City_GetCityByCode0_HTTP_Handler(srv CityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCityByCodeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCityGetCityByCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCityByCode(ctx, req.(*GetCityByCodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserCityReply)
		return ctx.Result(200, reply)
	}
}

func _City_GetHotCities0_HTTP_Handler(srv CityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetHotCitiesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCityGetHotCities)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetHotCities(ctx, req.(*GetHotCitiesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserCitiesReply)
		return ctx.Result(200, reply)
	}
}

type CityHTTPClient interface {
	CreateCity(ctx context.Context, req *CreateCityRequest, opts ...http.CallOption) (rsp *CreateCityReply, err error)
	GetCity(ctx context.Context, req *GetCityRequest, opts ...http.CallOption) (rsp *GetCityReply, err error)
	GetCityByCode(ctx context.Context, req *GetCityByCodeRequest, opts ...http.CallOption) (rsp *GetUserCityReply, err error)
	GetHotCities(ctx context.Context, req *GetHotCitiesRequest, opts ...http.CallOption) (rsp *ListUserCitiesReply, err error)
	GetUserCity(ctx context.Context, req *GetUserCityRequest, opts ...http.CallOption) (rsp *GetUserCityReply, err error)
	ListCities(ctx context.Context, req *ListCitiesRequest, opts ...http.CallOption) (rsp *ListCitiesReply, err error)
	ListUserCities(ctx context.Context, req *ListUserCitiesRequest, opts ...http.CallOption) (rsp *ListUserCitiesReply, err error)
	SearchCities(ctx context.Context, req *SearchCitiesRequest, opts ...http.CallOption) (rsp *SearchCitiesReply, err error)
	UpdateCity(ctx context.Context, req *UpdateCityRequest, opts ...http.CallOption) (rsp *UpdateCityReply, err error)
	UpdateCityStatus(ctx context.Context, req *UpdateCityStatusRequest, opts ...http.CallOption) (rsp *UpdateCityStatusReply, err error)
}

type CityHTTPClientImpl struct {
	cc *http.Client
}

func NewCityHTTPClient(client *http.Client) CityHTTPClient {
	return &CityHTTPClientImpl{client}
}

func (c *CityHTTPClientImpl) CreateCity(ctx context.Context, in *CreateCityRequest, opts ...http.CallOption) (*CreateCityReply, error) {
	var out CreateCityReply
	pattern := "/api/admin/cities"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCityCreateCity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CityHTTPClientImpl) GetCity(ctx context.Context, in *GetCityRequest, opts ...http.CallOption) (*GetCityReply, error) {
	var out GetCityReply
	pattern := "/api/admin/cities/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCityGetCity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CityHTTPClientImpl) GetCityByCode(ctx context.Context, in *GetCityByCodeRequest, opts ...http.CallOption) (*GetUserCityReply, error) {
	var out GetUserCityReply
	pattern := "/api/cities/code/{code}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCityGetCityByCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CityHTTPClientImpl) GetHotCities(ctx context.Context, in *GetHotCitiesRequest, opts ...http.CallOption) (*ListUserCitiesReply, error) {
	var out ListUserCitiesReply
	pattern := "/api/cities/hot"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCityGetHotCities))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CityHTTPClientImpl) GetUserCity(ctx context.Context, in *GetUserCityRequest, opts ...http.CallOption) (*GetUserCityReply, error) {
	var out GetUserCityReply
	pattern := "/api/cities/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCityGetUserCity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CityHTTPClientImpl) ListCities(ctx context.Context, in *ListCitiesRequest, opts ...http.CallOption) (*ListCitiesReply, error) {
	var out ListCitiesReply
	pattern := "/api/admin/cities"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCityListCities))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CityHTTPClientImpl) ListUserCities(ctx context.Context, in *ListUserCitiesRequest, opts ...http.CallOption) (*ListUserCitiesReply, error) {
	var out ListUserCitiesReply
	pattern := "/api/cities"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCityListUserCities))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CityHTTPClientImpl) SearchCities(ctx context.Context, in *SearchCitiesRequest, opts ...http.CallOption) (*SearchCitiesReply, error) {
	var out SearchCitiesReply
	pattern := "/api/cities/search"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCitySearchCities))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CityHTTPClientImpl) UpdateCity(ctx context.Context, in *UpdateCityRequest, opts ...http.CallOption) (*UpdateCityReply, error) {
	var out UpdateCityReply
	pattern := "/api/admin/cities/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCityUpdateCity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CityHTTPClientImpl) UpdateCityStatus(ctx context.Context, in *UpdateCityStatusRequest, opts ...http.CallOption) (*UpdateCityStatusReply, error) {
	var out UpdateCityStatusReply
	pattern := "/api/admin/cities/{id}/status"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCityUpdateCityStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
