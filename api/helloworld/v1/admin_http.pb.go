// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.19.4
// source: helloworld/v1/admin.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAdminGetPriceRule = "/api.helloworld.v1.Admin/GetPriceRule"
const OperationAdminSetPriceRule = "/api.helloworld.v1.Admin/SetPriceRule"
const OperationAdminUploadFile = "/api.helloworld.v1.Admin/UploadFile"

type AdminHTTPServer interface {
	GetPriceRule(context.Context, *GetPriceRuleReq) (*GetPriceRuleRes, error)
	SetPriceRule(context.Context, *SetPriceRuleReq) (*SetPriceRuleRes, error)
	UploadFile(context.Context, *UploadFileReq) (*UploadFileRes, error)
}

func RegisterAdminHTTPServer(s *http.Server, srv AdminHTTPServer) {
	r := s.Route("/")
	r.POST("/admin/setPriceRule", _Admin_SetPriceRule0_HTTP_Handler(srv))
	r.GET("/admin/getPriceRule", _Admin_GetPriceRule0_HTTP_Handler(srv))
	r.GET("/admin/uploadFile", _Admin_UploadFile0_HTTP_Handler(srv))
}

func _Admin_SetPriceRule0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetPriceRuleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminSetPriceRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetPriceRule(ctx, req.(*SetPriceRuleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetPriceRuleRes)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetPriceRule0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPriceRuleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetPriceRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPriceRule(ctx, req.(*GetPriceRuleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPriceRuleRes)
		return ctx.Result(200, reply)
	}
}

func _Admin_UploadFile0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UploadFileReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminUploadFile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UploadFile(ctx, req.(*UploadFileReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UploadFileRes)
		return ctx.Result(200, reply)
	}
}

type AdminHTTPClient interface {
	GetPriceRule(ctx context.Context, req *GetPriceRuleReq, opts ...http.CallOption) (rsp *GetPriceRuleRes, err error)
	SetPriceRule(ctx context.Context, req *SetPriceRuleReq, opts ...http.CallOption) (rsp *SetPriceRuleRes, err error)
	UploadFile(ctx context.Context, req *UploadFileReq, opts ...http.CallOption) (rsp *UploadFileRes, err error)
}

type AdminHTTPClientImpl struct {
	cc *http.Client
}

func NewAdminHTTPClient(client *http.Client) AdminHTTPClient {
	return &AdminHTTPClientImpl{client}
}

func (c *AdminHTTPClientImpl) GetPriceRule(ctx context.Context, in *GetPriceRuleReq, opts ...http.CallOption) (*GetPriceRuleRes, error) {
	var out GetPriceRuleRes
	pattern := "/admin/getPriceRule"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetPriceRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) SetPriceRule(ctx context.Context, in *SetPriceRuleReq, opts ...http.CallOption) (*SetPriceRuleRes, error) {
	var out SetPriceRuleRes
	pattern := "/admin/setPriceRule"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminSetPriceRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) UploadFile(ctx context.Context, in *UploadFileReq, opts ...http.CallOption) (*UploadFileRes, error) {
	var out UploadFileRes
	pattern := "/admin/uploadFile"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminUploadFile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
